<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frenlee</title>
  
  <subtitle>勇往直前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.frenlee.com/"/>
  <updated>2018-11-20T04:09:53.000Z</updated>
  <id>http://blog.frenlee.com/</id>
  
  <author>
    <name>Foyal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx根据版本信息访问不同的项目</title>
    <link href="http://blog.frenlee.com/2017/12/nginx-lua-header-version/"/>
    <id>http://blog.frenlee.com/2017/12/nginx-lua-header-version/</id>
    <published>2017-12-27T16:43:26.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在一些api项目中,需要根据设定的版本信息访问不同的项目,在API的开发中,每一个版本可以运行一套代码,这样只需要做到后面的版本兼容到之前的版本就可以了,下面是相同域名下根据头部信息中的版本信息访问不同的项目的nginx配置.</p><a id="more"></a><h3 id="安装nginx-服务器"><a href="#安装nginx-服务器" class="headerlink" title="安装nginx 服务器"></a>安装nginx 服务器</h3><ul><li>可以直接安装  <a href="https://openresty.org/cn/" target="_blank" rel="noopener">openrestry</a></li><li>安装lua模块 <a href="https://github.com/openresty/lua-nginx-module#installation" target="_blank" rel="noopener">lua-nginx-module</a></li></ul><blockquote><p>请自行选择合适的方式安装</p></blockquote><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote><p>在nginx配置中的server 模块中获取头部版本信息,并反向代理到对应的版本上</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">server_name</span> api.app;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">content_by_lua</span> <span class="string">'</span></span><br><span class="line"><span class="string">                    local headers = ngx.req.get_headers()</span></span><br><span class="line"><span class="string">                    local version = headers["X-VERSION"]</span></span><br><span class="line"><span class="string">                    if version == nil then</span></span><br><span class="line"><span class="string">                        ngx.exec("<span class="variable">@v1</span>.3.0")</span></span><br><span class="line"><span class="string">                    end</span></span><br><span class="line"><span class="string">                    local api_version = string.sub(version, string.find(version, "%d+%.%d+%.%d"))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    ngx.exec("<span class="variable">@v</span>"..api_version)</span></span><br><span class="line"><span class="string">                '</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="variable">@v1</span>.<span class="number">1</span>.<span class="number">0</span> &#123;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   Remote_Addr      <span class="variable">$http_true_client_ip</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://127.0.0.1:8001;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="variable">@v1</span>.<span class="number">2</span>.<span class="number">0</span> &#123;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   Remote_Addr      <span class="variable">$http_true_client_ip</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://127.0.0.1:8002;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="variable">@v1</span>.<span class="number">3</span>.<span class="number">0</span> &#123;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   Remote_Addr      <span class="variable">$http_true_client_ip</span>;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://127.0.0.1:8003;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>例如1.1.0 的nginx 配置如下:<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8001</span>;</span><br><span class="line">    <span class="attribute">index</span> index.php;</span><br><span class="line">    <span class="attribute">root</span> /path/to/project/root;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> /index.php <span class="literal">last</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一些api项目中,需要根据设定的版本信息访问不同的项目,在API的开发中,每一个版本可以运行一套代码,这样只需要做到后面的版本兼容到之前的版本就可以了,下面是相同域名下根据头部信息中的版本信息访问不同的项目的nginx配置.&lt;/p&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://blog.frenlee.com/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://blog.frenlee.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx 二级域名配置</title>
    <link href="http://blog.frenlee.com/2017/12/nginx-conf-sub-domain/"/>
    <id>http://blog.frenlee.com/2017/12/nginx-conf-sub-domain/</id>
    <published>2017-12-27T16:03:57.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>nginx 二级域名的配置,现在一般都喜欢一个站点一个配置文件的配置方式,在nginx.conf 中通过include 的方式加载</p><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><blockquote><p>修改<code>nginx/conf/nginx.conf</code> 的配置,将server 中的模块移出去,配置到<code>conf.d</code> 文件夹中<br><a id="more"></a><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">include</span> conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="添加站点配置"><a href="#添加站点配置" class="headerlink" title="添加站点配置"></a>添加站点配置</h3><blockquote><p>创建 <code>nginx/conf/conf.d</code> 文件夹,进入文件夹中创建你需要创建的站点的配置文件,例如 <code>blog.frenlee.com.conf</code></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> blog.frenlee.com;</span><br><span class="line">    <span class="attribute">root</span> <span class="string">"/path/to/project/root"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> = /favicon.ico &#123; <span class="attribute">access_log</span> <span class="literal">off</span>; <span class="attribute">log_not_found</span> <span class="literal">off</span>; &#125;</span><br><span class="line">    <span class="attribute">location</span> = /robots.txt  &#123; <span class="attribute">access_log</span> <span class="literal">off</span>; <span class="attribute">log_not_found</span> <span class="literal">off</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/log/host_blog.access.log;</span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/log/host_blog.<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">100m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">fastcgi_split_path_info</span><span class="regexp"> ^(.+\.php)(/.+)$</span>;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span>  <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">fastcgi_intercept_errors</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">fastcgi_buffer_size</span> <span class="number">16k</span>;</span><br><span class="line">        <span class="attribute">fastcgi_buffers</span> <span class="number">4</span> <span class="number">16k</span>;</span><br><span class="line">        <span class="attribute">fastcgi_connect_timeout</span> <span class="number">300</span>;</span><br><span class="line">        <span class="attribute">fastcgi_send_timeout</span> <span class="number">300</span>;</span><br><span class="line">        <span class="attribute">fastcgi_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /\.ht</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此就可以了,配置好后,需要<code>nginx -s reload</code> 配置,reload 前可以先检查下配置是否正确 <code>nginx -t</code>,如果需要配置其他的站点,只需要改下域名和根路径就ok!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx 二级域名的配置,现在一般都喜欢一个站点一个配置文件的配置方式,在nginx.conf 中通过include 的方式加载&lt;/p&gt;
&lt;h3 id=&quot;nginx配置&quot;&gt;&lt;a href=&quot;#nginx配置&quot; class=&quot;headerlink&quot; title=&quot;nginx配置&quot;&gt;&lt;/a&gt;nginx配置&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;修改&lt;code&gt;nginx/conf/nginx.conf&lt;/code&gt; 的配置,将server 中的模块移出去,配置到&lt;code&gt;conf.d&lt;/code&gt; 文件夹中&lt;br&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://blog.frenlee.com/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://blog.frenlee.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>git修改文件权限</title>
    <link href="http://blog.frenlee.com/2017/12/git-file-mode/"/>
    <id>http://blog.frenlee.com/2017/12/git-file-mode/</id>
    <published>2017-12-27T13:11:31.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看Respoitory中文件权限"><a href="#查看Respoitory中文件权限" class="headerlink" title="查看Respoitory中文件权限"></a>查看Respoitory中文件权限</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git ls-tree HEAD</span><br><span class="line"><span class="number">100644</span> blob xxxxxxxxxx    <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">update</span>-<span class="keyword">index</span> <span class="comment">--chmod=+x run</span></span><br></pre></td></tr></table></figure><blockquote><p>权限修改后,相当于文件进入了index中</p></blockquote><h3 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">"revise permission access"</span></span><br></pre></td></tr></table></figure><h3 id="提交后查看"><a href="#提交后查看" class="headerlink" title="提交后查看"></a>提交后查看</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git ls-tree HEAD </span><br><span class="line"><span class="number">100755</span> blob xxxxxxxxxx    <span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;查看Respoitory中文件权限&quot;&gt;&lt;a href=&quot;#查看Respoitory中文件权限&quot; class=&quot;headerlink&quot; title=&quot;查看Respoitory中文件权限&quot;&gt;&lt;/a&gt;查看Respoitory中文件权限&lt;/h3&gt;&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git ls-tree HEAD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;100644&lt;/span&gt; blob xxxxxxxxxx    &lt;span class=&quot;keyword&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.frenlee.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://blog.frenlee.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>golang 后台服务应用基本组件组合</title>
    <link href="http://blog.frenlee.com/2017/12/go-base-structure/"/>
    <id>http://blog.frenlee.com/2017/12/go-base-structure/</id>
    <published>2017-12-21T10:26:01.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>golang 很适合写一些后台的小服务程序,一般来说一个服务程序的构成都离不开配置,日志,数据库的操作,简单说下个人开发中使用的程序组件以及基本目录结构.</p><a id="more"></a><p>项目中使用<a href="https://github.com/kardianos/govendor" target="_blank" rel="noopener">govendor</a>安装项目依赖,<code>base/</code>为项目目录名称</p><h3 id="配置组件"><a href="#配置组件" class="headerlink" title="配置组件"></a>配置组件</h3><blockquote><p>在程序中配置是一个必不可少的组件,它是程序更加灵活,给开发带来更多便捷.将设置置于配置文件中，从而没有必要在每次设置更改时重新编译应用程序。这里使用的<a href="https://github.com/toml-lang/toml" target="_blank" rel="noopener">toml</a>.</p></blockquote><h4 id="安装组件"><a href="#安装组件" class="headerlink" title="安装组件:"></a>安装组件:</h4><p><code>govendor fetch github.com/BurntSushi/toml</code></p><h4 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用:"></a>组件使用:</h4><h5 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h5><p><code>base/app.conf</code>代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[database]</span><br><span class="line">host = &quot;127.0.0.1&quot;</span><br><span class="line">port = 3306</span><br><span class="line">db = &quot;test&quot;</span><br><span class="line">user = &quot;root&quot;</span><br><span class="line">password = &quot;123456&quot;</span><br><span class="line"></span><br><span class="line">[log]</span><br><span class="line">path = &quot;./&quot;</span><br><span class="line">file = &quot;log.log&quot;</span><br></pre></td></tr></table></figure><h5 id="创建配置文件解析读取代码"><a href="#创建配置文件解析读取代码" class="headerlink" title="创建配置文件解析读取代码"></a>创建配置文件解析读取代码</h5><p><code>base/config/config.go</code>:代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/BurntSushi/toml"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _cfg MasterConfig</span><br><span class="line"></span><br><span class="line"><span class="comment">// MasterConfig App主配置</span></span><br><span class="line"><span class="keyword">type</span> MasterConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">    Db DbConfig    <span class="string">`toml:"database"`</span></span><br><span class="line">    LC LogConfig   <span class="string">`toml:"log"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DbConfig 数据库配置</span></span><br><span class="line"><span class="keyword">type</span> DbConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">Host     <span class="keyword">string</span> <span class="string">`toml:"host"`</span></span><br><span class="line">Port     <span class="keyword">int</span>    <span class="string">`toml:"port"`</span></span><br><span class="line">Db       <span class="keyword">string</span> <span class="string">`toml:"db"`</span></span><br><span class="line">User     <span class="keyword">string</span> <span class="string">`toml:"user"`</span></span><br><span class="line">Password <span class="keyword">string</span> <span class="string">`toml:"password"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LogConfig 日志文件配置</span></span><br><span class="line"><span class="keyword">type</span> LogConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">Path <span class="keyword">string</span> <span class="string">`toml:"path"`</span></span><br><span class="line">File <span class="keyword">string</span> <span class="string">`toml:"file"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Init 初始化配置文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">(cfg <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> _, err := toml.DecodeFile(cfg, &amp;_cfg); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetDbConfig 获取数据库配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDbConfig</span><span class="params">()</span> <span class="title">DbConfig</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> _cfg.Db</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetLogConfig 获取日志配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetLogConfig</span><span class="params">()</span> <span class="title">LogConfig</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> _cfg.LC</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志组件"><a href="#日志组件" class="headerlink" title="日志组件"></a>日志组件</h4><blockquote><p>记录程序运行记录,必要的地方都带上日志,可以根据日志来追踪程序的运行状态</p></blockquote><h4 id="安装组件-1"><a href="#安装组件-1" class="headerlink" title="安装组件:"></a>安装组件:</h4><p><code>govendor fetch github.com/astaxie/beego/logs</code></p><h4 id="组件使用-1"><a href="#组件使用-1" class="headerlink" title="组件使用:"></a>组件使用:</h4><h5 id="创建日志实例化代码"><a href="#创建日志实例化代码" class="headerlink" title="创建日志实例化代码"></a>创建日志实例化代码</h5><p><code>base/log/log.go</code> 代码如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> log</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"base/config"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/astaxie/beego/logs"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hlog *logs.BeeLogger</span><br><span class="line"></span><br><span class="line"><span class="comment">// Init 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">hlog = logs.NewLogger(<span class="number">100</span>)</span><br><span class="line">lconf := config.GetLogConfig()</span><br><span class="line">logFile := lconf.Path + lconf.File</span><br><span class="line"><span class="keyword">return</span> hlog.SetLogger(logs.AdapterFile, <span class="string">`&#123;"filename":"`</span>+logFile+<span class="string">`","level":7,"maxlines":0,"maxsize":0,"daily":true,"maxdays":120, "rotate":false&#125;`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Log 获取日志句柄</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Log</span><span class="params">()</span> *<span class="title">logs</span>.<span class="title">BeeLogger</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> hlog</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据库组件"><a href="#数据库组件" class="headerlink" title="数据库组件"></a>数据库组件</h4><blockquote><p>操作数据</p></blockquote><h4 id="安装组件-2"><a href="#安装组件-2" class="headerlink" title="安装组件:"></a>安装组件:</h4><p><code>govendor fetch github.com/gocraft/dbr</code></p><h4 id="组件使用-2"><a href="#组件使用-2" class="headerlink" title="组件使用:"></a>组件使用:</h4><h5 id="创建日志实例化代码-1"><a href="#创建日志实例化代码-1" class="headerlink" title="创建日志实例化代码"></a>创建日志实例化代码</h5><p><code>base/db/mysql.go</code> 代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"base/config"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line"><span class="string">"github.com/gocraft/dbr"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DB_DNS = <span class="string">"%s:%s@tcp(%s:%d)/%s?loc=Local&amp;parseTime=true"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _session *dbr.Session</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">//初始化数据连接</span></span><br><span class="line">cfg := config.GetDbConfig()</span><br><span class="line"></span><br><span class="line">dns := fmt.Sprintf(DB_DNS, cfg.User, cfg.Password, cfg.Host, cfg.Port, cfg.Db)</span><br><span class="line">conn, err := dbr.Open(<span class="string">"mysql"</span>, dns, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_session = conn.NewSession(<span class="literal">nil</span>)</span><br><span class="line">_session.SetMaxOpenConns(<span class="number">20</span>)</span><br><span class="line">_session.SetMaxIdleConns(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err = _session.Ping(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSession 获取数据库链接会话句柄</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSession</span><span class="params">()</span> *<span class="title">dbr</span>.<span class="title">Session</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> _session</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例化组件"><a href="#实例化组件" class="headerlink" title="实例化组件"></a>实例化组件</h3><blockquote><p>组件搭建完成后就是使用组件了,组件都需要再base 中初始化.</p></blockquote><p><code>base/main.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"base/config"</span></span><br><span class="line"><span class="string">"base/db"</span></span><br><span class="line"><span class="string">"base/log"</span></span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appConf = flag.String(<span class="string">"conf"</span>, <span class="string">"app.conf"</span>, <span class="string">"server config file"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="comment">// 配置文件初始化</span></span><br><span class="line"><span class="keyword">if</span> err := config.Init(*appConf); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 初始化日志组件</span></span><br><span class="line"><span class="keyword">if</span> err := log.Init(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化数据库连接</span></span><br><span class="line"><span class="keyword">if</span> err := db.Init(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 代码逻辑处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang 很适合写一些后台的小服务程序,一般来说一个服务程序的构成都离不开配置,日志,数据库的操作,简单说下个人开发中使用的程序组件以及基本目录结构.&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="http://blog.frenlee.com/categories/golang/"/>
    
    
      <category term="go" scheme="http://blog.frenlee.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>tmux快捷键 &amp; 速查表</title>
    <link href="http://blog.frenlee.com/2017/11/tmux-guide/"/>
    <id>http://blog.frenlee.com/2017/11/tmux-guide/</id>
    <published>2017-11-28T09:45:46.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>启动新会话：</p><pre><code>tmux [new -s 会话名 -n 窗口名]</code></pre><p>恢复会话：</p><pre><code>tmux at [-t 会话名]</code></pre><p>列出所有会话：</p><pre><code>tmux ls</code></pre><p>关闭会话：</p><pre><code>tmux kill-session -t 会话名</code></pre><p>关闭所有会话：</p><pre><code>tmux ls | grep : | cut -d. -f1 | awk &apos;{print substr($1, 0, length($1)-1)}&apos; | xargs kill</code></pre><a id="more"></a><h1 id="在-Tmux-中，按下-Tmux-前缀-ctrl-b，然后："><a href="#在-Tmux-中，按下-Tmux-前缀-ctrl-b，然后：" class="headerlink" title="在 Tmux 中，按下 Tmux 前缀 ctrl+b，然后："></a>在 Tmux 中，按下 Tmux 前缀 <code>ctrl+b</code>，然后：</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><pre><code>:new&lt;回车&gt;  启动新会话s           列出所有会话$           重命名当前会话</code></pre><h2 id="窗口-标签页"><a href="#窗口-标签页" class="headerlink" title="窗口 (标签页)"></a>窗口 (标签页)</h2><pre><code>c  创建新窗口w  列出所有窗口n  后一个窗口p  前一个窗口f  查找窗口,  重命名当前窗口&amp;  关闭当前窗口</code></pre><h2 id="调整窗口排序"><a href="#调整窗口排序" class="headerlink" title="调整窗口排序"></a>调整窗口排序</h2><pre><code>swap-window -s 3 -t 1  交换 3 号和 1 号窗口swap-window -t 1       交换当前和 1 号窗口move-window -t 1       移动当前窗口到 1 号</code></pre><h2 id="窗格（分割窗口）"><a href="#窗格（分割窗口）" class="headerlink" title="窗格（分割窗口）"></a>窗格（分割窗口）</h2><pre><code>%  垂直分割&quot;  水平分割o  交换窗格x  关闭窗格⍽  左边这个符号代表空格键 - 切换布局q 显示每个窗格是第几个，当数字出现的时候按数字几就选中第几个窗格{ 与上一个窗格交换位置} 与下一个窗格交换位置z 切换窗格最大化/最小化</code></pre><h2 id="同步窗格"><a href="#同步窗格" class="headerlink" title="同步窗格"></a>同步窗格</h2><p>这么做可以切换到想要的窗口，输入 Tmux 前缀和一个冒号呼出命令提示行，然后输入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:setw</span> <span class="selector-tag">synchronize-panes</span></span><br></pre></td></tr></table></figure><p>你可以指定开或关，否则重复执行命令会在两者间切换。<br>这个选项值针对某个窗口有效，不会影响别的会话和窗口。<br>完事儿之后再次执行命令来关闭。<a href="http://blog.sanctum.geek.nz/sync-tmux-panes/" target="_blank" rel="noopener">帮助</a></p><h2 id="调整窗格尺寸"><a href="#调整窗格尺寸" class="headerlink" title="调整窗格尺寸"></a>调整窗格尺寸</h2><p>如果你不喜欢默认布局，可以重调窗格的尺寸。虽然这很容易实现，但一般不需要这么干。这几个命令用来调整窗格：</p><pre><code>PREFIX : resize-pane -D          当前窗格向下扩大 1 格PREFIX : resize-pane -U          当前窗格向上扩大 1 格PREFIX : resize-pane -L          当前窗格向左扩大 1 格PREFIX : resize-pane -R          当前窗格向右扩大 1 格PREFIX : resize-pane -D 20       当前窗格向下扩大 20 格PREFIX : resize-pane -t 2 -L 20  编号为 2 的窗格向左扩大 20 格</code></pre><h2 id="文本复制模式："><a href="#文本复制模式：" class="headerlink" title="文本复制模式："></a>文本复制模式：</h2><p>按下<strong>前缀 [</strong>进入文本复制模式。可以使用方向键在屏幕中移动光标。默认情况下，方向键是启用的。在配置文件中启用 Vim 键盘布局来切换窗口、调整窗格大小。Tmux 也支持 Vi 模式。要是想启用 Vi 模式，只需要把下面这一行添加到 .tmux.conf 中：</p><pre><code>setw -g mode-keys vi</code></pre><p>启用这条配置后，就可以使用 h、j、k、l 来移动光标了。</p><p>想要退出文本复制模式的话，按下回车键就可以了。一次移动一格效率低下，在 Vi 模式启用的情况下，可以辅助一些别的快捷键高效工作。</p><p>例如，可以使用 w 键逐词移动，使用 b 键逐词回退。使用 f 键加上任意字符跳转到当前行第一次出现该字符的位置，使用 F 键达到相反的效果。</p><pre><code>vi             emacs        功能^              M-m          反缩进Escape         C-g          清除选定内容Enter          M-w          复制选定内容j              Down         光标下移h              Left         光标左移l              Right        光标右移L                           光标移到尾行M              M-r          光标移到中间行H              M-R          光标移到首行k              Up           光标上移d              C-u          删除整行D              C-k          删除到行末$              C-e          移到行尾:              g            前往指定行C-d            M-Down       向下滚动半屏C-u            M-Up         向上滚动半屏C-f            Page down    下一页w              M-f          下一个词p              C-y          粘贴C-b            Page up      上一页b              M-b          上一个词q              Escape       退出C-Down or J    C-Down       向下翻C-Up or K      C-Up         向下翻n              n            继续搜索?              C-r          向前搜索/              C-s          向后搜索0              C-a          移到行首Space          C-Space      开始选中               C-t          字符调序</code></pre><h2 id="杂项："><a href="#杂项：" class="headerlink" title="杂项："></a>杂项：</h2><pre><code>d  退出 tmux（tmux 仍在后台运行）t  窗口中央显示一个数字时钟?  列出所有快捷键:  命令提示符</code></pre><h2 id="配置选项："><a href="#配置选项：" class="headerlink" title="配置选项："></a>配置选项：</h2><pre><code># 鼠标支持 - 设置为 on 来启用鼠标* setw -g mode-mouse off* set -g mouse-select-pane off* set -g mouse-resize-pane off* set -g mouse-select-window off# 设置默认终端模式为 256colorset -g default-terminal &quot;screen-256color&quot;# 启用活动警告setw -g monitor-activity onset -g visual-activity on# 居中窗口列表set -g status-justify centre# 最大化/恢复窗格unbind Up bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmpunbind Downbind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp</code></pre><h2 id="配置文件（-tmux-conf）："><a href="#配置文件（-tmux-conf）：" class="headerlink" title="配置文件（~/.tmux.conf）："></a>配置文件（~/.tmux.conf）：</h2><p><code>`</code>bash</p><h1 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h1><p>set -g default-terminal “screen-256color”<br>set -g display-time 3000<br>set -g escape-time 0<br>set -g history-limit 65535<br>set -g base-index 1<br>set -g pane-base-index 1</p><h1 id="前缀绑定-Ctrl-a"><a href="#前缀绑定-Ctrl-a" class="headerlink" title="前缀绑定 (Ctrl+a)"></a>前缀绑定 (Ctrl+a)</h1><p>set -g prefix ^a<br>unbind ^b<br>bind a send-prefix</p><h1 id="分割窗口"><a href="#分割窗口" class="headerlink" title="分割窗口"></a>分割窗口</h1><p>unbind ‘“‘<br>bind - splitw -v<br>unbind %<br>bind | splitw -h</p><h1 id="选中窗口"><a href="#选中窗口" class="headerlink" title="选中窗口"></a>选中窗口</h1><p>bind-key k select-pane -U<br>bind-key j select-pane -D<br>bind-key h select-pane -L<br>bind-key l select-pane -R</p><h1 id="copy-mode-将快捷键设置为-vi-模式"><a href="#copy-mode-将快捷键设置为-vi-模式" class="headerlink" title="copy-mode 将快捷键设置为 vi 模式"></a>copy-mode 将快捷键设置为 vi 模式</h1><p>setw -g mode-keys vi</p><h1 id="启用鼠标-Tmux-v2-1"><a href="#启用鼠标-Tmux-v2-1" class="headerlink" title="启用鼠标(Tmux v2.1)"></a>启用鼠标(Tmux v2.1)</h1><p>set -g mouse on</p><h1 id="更新配置文件"><a href="#更新配置文件" class="headerlink" title="更新配置文件"></a>更新配置文件</h1><p>bind r source-file ~/.tmux.conf \; display “已更新”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;启动新会话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tmux [new -s 会话名 -n 窗口名]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;恢复会话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tmux at [-t 会话名]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;列出所有会话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tmux ls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关闭会话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tmux kill-session -t 会话名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关闭所有会话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tmux ls | grep : | cut -d. -f1 | awk &amp;apos;{print substr($1, 0, length($1)-1)}&amp;apos; | xargs kill
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.frenlee.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="linux" scheme="http://blog.frenlee.com/tags/linux/"/>
    
      <category term="tmux" scheme="http://blog.frenlee.com/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>JS判断App版本号</title>
    <link href="http://blog.frenlee.com/2017/07/js-app-version/"/>
    <id>http://blog.frenlee.com/2017/07/js-app-version/</id>
    <published>2017-07-07T17:57:02.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用JS来判断App的版本号"><a href="#使用JS来判断App的版本号" class="headerlink" title="使用JS来判断App的版本号"></a>使用JS来判断App的版本号</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// oprate 比较操作符</span></span><br><span class="line"><span class="keyword">var</span> versionCmp = <span class="function"><span class="keyword">function</span><span class="params">(nowVersion, version, operate)</span> </span>&#123;</span><br><span class="line">    version = version.replace(/[a-zA-Z_]/gi, <span class="string">''</span>)</span><br><span class="line">    nowVersion = nowVersion ? nowVersion[<span class="number">0</span>].replace(/[a-zA-Z_]/gi, <span class="string">''</span>) : <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> versionArr = version.split(<span class="string">"."</span>);</span><br><span class="line">    versionArr &amp;&amp; versionArr.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(v,k)</span></span>&#123;</span><br><span class="line">        versionArr[k] = (<span class="string">"000"</span>+v).substr(<span class="number">-3</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    version = versionArr.join(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">var</span> nowVersionArr = nowVersion.split(<span class="string">"."</span>);</span><br><span class="line">    nowVersionArr &amp;&amp; nowVersionArr.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(v,k)</span></span>&#123;</span><br><span class="line">        nowVersionArr[k] = (<span class="string">"000"</span>+v).substr(<span class="number">-3</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    nowVersion = nowVersionArr.join(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">if</span> (!operate) &#123;</span><br><span class="line">        operate = <span class="string">'=='</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">eval</span>(nowVersion+operate+version)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// versionCmp("1.2.0", "1.3.0", "&lt;")</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用JS来判断App的版本号&quot;&gt;&lt;a href=&quot;#使用JS来判断App的版本号&quot; class=&quot;headerlink&quot; title=&quot;使用JS来判断App的版本号&quot;&gt;&lt;/a&gt;使用JS来判断App的版本号&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="js" scheme="http://blog.frenlee.com/categories/js/"/>
    
    
      <category term="js" scheme="http://blog.frenlee.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>npm 版本升级</title>
    <link href="http://blog.frenlee.com/2017/07/npm-upgrade/"/>
    <id>http://blog.frenlee.com/2017/07/npm-upgrade/</id>
    <published>2017-07-06T09:47:02.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="npm升级方式"><a href="#npm升级方式" class="headerlink" title="npm升级方式"></a>npm升级方式</h3><h4 id="安装n模块"><a href="#安装n模块" class="headerlink" title="安装n模块"></a>安装n模块</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g n</span><br></pre></td></tr></table></figure><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">n stable</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;npm升级方式&quot;&gt;&lt;a href=&quot;#npm升级方式&quot; class=&quot;headerlink&quot; title=&quot;npm升级方式&quot;&gt;&lt;/a&gt;npm升级方式&lt;/h3&gt;&lt;h4 id=&quot;安装n模块&quot;&gt;&lt;a href=&quot;#安装n模块&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="js" scheme="http://blog.frenlee.com/categories/js/"/>
    
    
      <category term="js" scheme="http://blog.frenlee.com/tags/js/"/>
    
      <category term="npm" scheme="http://blog.frenlee.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Kafka使用go实现生产者和消费者</title>
    <link href="http://blog.frenlee.com/2017/05/kafka-demo-golang-implementation/"/>
    <id>http://blog.frenlee.com/2017/05/kafka-demo-golang-implementation/</id>
    <published>2017-05-22T15:01:31.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Kafka"><a href="#什么是Kafka" class="headerlink" title="什么是Kafka"></a>什么是Kafka</h3><p>Apache kafka是消息中间件的一种，是一个分布式的流平台,可以应用于高吞吐,高性能的消息队列服务.具体说明可以参考<a href="http://kafka.apache.org/documentation" target="_blank" rel="noopener">Apache Kafka官网</a>.下面简单的说下使用golang来实现Kafka的生产者和消费者.</p><a id="more"></a><h3 id="安装Kafka"><a href="#安装Kafka" class="headerlink" title="安装Kafka"></a>安装Kafka</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>官网下载页面:<code>http://kafka.apache.org/downloads</code><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirror.bit.edu.cn/apache/kafka/<span class="number">0.10</span><span class="meta">.2</span><span class="meta">.1</span>/kafka_2<span class="meta">.12</span>-<span class="number">0.10</span><span class="meta">.2</span><span class="meta">.1</span>.tgz</span><br><span class="line">tar -zxvf kafka_2<span class="meta">.12</span>-<span class="number">0.10</span><span class="meta">.2</span><span class="meta">.1</span>.tgz</span><br><span class="line">cd kafka_2<span class="meta">.12</span>-<span class="number">0.10</span><span class="meta">.2</span><span class="meta">.1</span></span><br></pre></td></tr></table></figure></p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.启动zookeeper</span></span><br><span class="line">bin/zookeeper-server-start<span class="selector-class">.sh</span> config/zookeeper<span class="selector-class">.properties</span> &amp;</span><br><span class="line"><span class="comment">// 2.启动kafka</span></span><br><span class="line">bin/kafka-server-start<span class="selector-class">.sh</span> config/server<span class="selector-class">.properties</span> &amp;</span><br></pre></td></tr></table></figure><h4 id="创建Topic"><a href="#创建Topic" class="headerlink" title="创建Topic"></a>创建Topic</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> 创建Topic</span><br><span class="line">bin/kafka-topics.sh <span class="params">--create</span> <span class="params">--zookeeper</span> localhost<span class="function">:2181</span> <span class="params">--replication-factor</span> 1 <span class="params">--partitions</span> 1 <span class="params">--topic</span> test</span><br><span class="line"></span><br><span class="line"><span class="string">//</span> 列出Topic是否创建成功</span><br><span class="line">bin/kafka-topics.sh <span class="params">--list</span> <span class="params">--zookeeper</span> localhost<span class="function">:2181</span></span><br></pre></td></tr></table></figure><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><p>向创建的test Topic 发送消息(生产者)<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.<span class="keyword">sh</span> --broker-<span class="keyword">list</span> localhos<span class="variable">t:9092</span> --topic test</span><br><span class="line">This <span class="keyword">is</span> <span class="keyword">a</span> message</span><br><span class="line">This <span class="keyword">is</span> another message</span><br></pre></td></tr></table></figure></p><h4 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h4><p>订阅一个test Topic,并进行消费<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-<span class="built_in">console</span>-consumer.sh --bootstrap-server localhost:<span class="number">9092</span> --topic test --<span class="keyword">from</span>-beginning</span><br><span class="line">This <span class="keyword">is</span> a message</span><br><span class="line">This <span class="keyword">is</span> another message</span><br></pre></td></tr></table></figure></p><p>如果你的生产者和消费者是成功的话,消费者开启的时候是可以收到所有生产者的消息的.</p><h3 id="生产者消费者具体实现"><a href="#生产者消费者具体实现" class="headerlink" title="生产者消费者具体实现"></a>生产者消费者具体实现</h3><p>下载Kafka客户端Go语言Library<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> github.<span class="keyword">com</span>/Shopify/sarama</span><br></pre></td></tr></table></figure></p><p><a href="https://cwiki.apache.org/confluence/display/KAFKA/Clients" target="_blank" rel="noopener">官方语言客户端Library</a></p><h4 id="生产者的实现"><a href="#生产者的实现" class="headerlink" title="生产者的实现"></a>生产者的实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"sarama"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">config := sarama.NewConfig()</span><br><span class="line">config.Producer.Return.Successes = <span class="literal">true</span> </span><br><span class="line">config.Producer.RequiredAcks = sarama.WaitForAll</span><br><span class="line">config.Producer.Partitioner = sarama.NewRandomPartitioner</span><br><span class="line"></span><br><span class="line">producer, err := sarama.NewSyncProducer([]<span class="keyword">string</span>&#123;<span class="string">"localhost:9092"</span>&#125;, config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> producer.Close()</span><br><span class="line"></span><br><span class="line">msg := &amp;sarama.ProducerMessage&#123;</span><br><span class="line">Topic:     <span class="string">"testGo"</span>,</span><br><span class="line">Partition: <span class="keyword">int32</span>(<span class="number">-1</span>),</span><br><span class="line">Key:       sarama.StringEncoder(<span class="string">"key"</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value <span class="keyword">string</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">// 生产消息</span></span><br><span class="line">inputReader := bufio.NewReader(os.Stdin)</span><br><span class="line">value, err = inputReader.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">value = strings.Replace(value, <span class="string">"\n"</span>, <span class="string">""</span>, <span class="number">-1</span>)</span><br><span class="line">msg.Value = sarama.ByteEncoder(value)</span><br><span class="line">paritition, offset, err := producer.SendMessage(msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Send Message Fail"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"Partion = %d, offset = %d\n"</span>, paritition, offset)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者的实现"><a href="#消费者的实现" class="headerlink" title="消费者的实现"></a>消费者的实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sarama"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">wg sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">consumer, err := sarama.NewConsumer([]<span class="keyword">string</span>&#123;<span class="string">"localhost:9092"</span>&#125;, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">partitionList, err := consumer.Partitions(<span class="string">"testGo"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> partition := <span class="keyword">range</span> partitionList &#123;</span><br><span class="line">pc, err := consumer.ConsumePartition(<span class="string">"testGo"</span>, <span class="keyword">int32</span>(partition), sarama.OffsetNewest)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> pc.AsyncClose()</span><br><span class="line"></span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(sarama.PartitionConsumer)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> msg := <span class="keyword">range</span> pc.Messages() &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Partition:%d, Offset:%d, Key:%s, Value:%s\n"</span>, msg.Partition, msg.Offset, <span class="keyword">string</span>(msg.Key), <span class="keyword">string</span>(msg.Value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;(pc)</span><br><span class="line">wg.Wait()</span><br><span class="line">consumer.Close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS:如果你的代码不是运行在loalhost这台机器上的话,需要修改 <code>config/server.properties</code> 配置文件的listeners中的host,否则kafka服务端会拒绝你非localhost的连接请求,配置好后重启kafka服务.</p></blockquote><h4 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h4><p>运行生产者<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="keyword">run</span><span class="bash"> producer/main.go</span></span><br></pre></td></tr></table></figure></p><p>运行消费者<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="keyword">run</span><span class="bash"> consumer/main.go</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/kafka-go.png" alt="执行"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Kafka&quot;&gt;&lt;a href=&quot;#什么是Kafka&quot; class=&quot;headerlink&quot; title=&quot;什么是Kafka&quot;&gt;&lt;/a&gt;什么是Kafka&lt;/h3&gt;&lt;p&gt;Apache kafka是消息中间件的一种，是一个分布式的流平台,可以应用于高吞吐,高性能的消息队列服务.具体说明可以参考&lt;a href=&quot;http://kafka.apache.org/documentation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache Kafka官网&lt;/a&gt;.下面简单的说下使用golang来实现Kafka的生产者和消费者.&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.frenlee.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="go" scheme="http://blog.frenlee.com/tags/go/"/>
    
      <category term="kafka" scheme="http://blog.frenlee.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>JWT的应用</title>
    <link href="http://blog.frenlee.com/2017/05/jwt/"/>
    <id>http://blog.frenlee.com/2017/05/jwt/</id>
    <published>2017-05-16T18:55:02.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="理解JWT"><a href="#理解JWT" class="headerlink" title="理解JWT"></a>理解JWT</h3><h4 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h4><p>Json Web token(JWT)是基于开放标准(<a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener">RFC 7519</a>)设计的一种紧凑且独立的认证机制.它比较安全,可验证.可以对该token进行加密验证,一般用于用户认证和信息的安全传输上.它比较小,可以传输在URL.POST,参数,http头文件中,它可以携带一些用户自定义的信息.所以它可以用来做接口方面的认证,单点登录的用户认证.</p><a id="more"></a><h4 id="JWT的构成"><a href="#JWT的构成" class="headerlink" title="JWT的构成"></a>JWT的构成</h4><p>JWT 主要由三个部分构成:</p><ul><li>Header 头部</li><li>Payload 信息承载体</li><li>Signature 签名<br>这三个部分有.号隔开,格式如下<br><code>header.payload.signature</code></li></ul><h5 id="Header"><a href="#Header" class="headerlink" title="Header:"></a>Header:</h5><p>头部由两个部分组成,这部分在token上会经过base64编码,所以这部分在是可以被反编码看到明文的.</p><ul><li>声明类型,这里是JWT</li><li>声明加密的算法,例如 HMAC,SHA256或者RSA.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"alg"</span>: <span class="string">"HMAC"</span>,</span><br><span class="line">    <span class="attr">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><p>第二部分是信息承载体,主要由三个部分组成:</p><ul><li>保留的声明</li><li>公共的声明</li><li>私有的声明</li></ul><h5 id="保留的声明"><a href="#保留的声明" class="headerlink" title="保留的声明"></a>保留的声明</h5><ul><li>iss: jwt签发者</li><li>sub: jwt所面向的用户</li><li>aud: 接收jwt的一方</li><li>exp: jwt的过期时间，这个过期时间必须要大于签发时间</li><li>nbf: 定义在什么时间之前，该jwt都是不可用的.</li><li>iat: jwt的签发时间</li><li>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li></ul><p>这部分是保留的声明,当然你也可以当做其他用法用,不过不建议这样做.不然别人获取到你token之后你还得大费口舌的去解释一番.</p><h5 id="公共的声明"><a href="#公共的声明" class="headerlink" title="公共的声明"></a>公共的声明</h5><p>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</p><h5 id="私有的声明"><a href="#私有的声明" class="headerlink" title="私有的声明"></a>私有的声明</h5><p>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p><p>定义一个payload:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"1234567890"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="attr">"admin"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h4><p>第三部分签名,它主要是用来验证token的安全性,因为token一般是由生成者来使用的.或者生成者和使用者会约定一个加密的key,基于header和payload以及key来生成这个部分,然后验证的时候也是基于这些数据来验证的安全性.例如使用sha256算法:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(<span class="name">header</span>) + <span class="string">"."</span> +</span><br><span class="line">  base64UrlEncode(<span class="name">payload</span>),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><h3 id="在PHP中应用"><a href="#在PHP中应用" class="headerlink" title="在PHP中应用"></a>在PHP中应用</h3><p>jwt的流程如下:<br><img src="/images/jwt-diagram.png" alt="jwt"></p><h4 id="加载语言组件代码"><a href="#加载语言组件代码" class="headerlink" title="加载语言组件代码"></a>加载语言组件代码</h4><p>可以在(<a href="jwt.io">jwt.io</a>)官方网站可以找到各种语言的JWT代码,下面我们已PHP为力,使用composer来加载下代码(<a href="https://github.com/lcobucci/jwt)" target="_blank" rel="noopener">https://github.com/lcobucci/jwt)</a>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> lcobucci/jwt</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="生成Token"><a href="#生成Token" class="headerlink" title="生成Token"></a>生成Token</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">'./vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// basic usage</span></span><br><span class="line"><span class="keyword">use</span> \<span class="title">Lcobucci</span>\<span class="title">JWT</span>\<span class="title">Builder</span>;</span><br><span class="line"><span class="keyword">use</span> \<span class="title">Lcobucci</span>\<span class="title">JWT</span>\<span class="title">Parser</span>;</span><br><span class="line"><span class="keyword">use</span> \<span class="title">Lcobucci</span>\<span class="title">JWT</span>\<span class="title">Signer</span>\<span class="title">Hmac</span>\<span class="title">Sha256</span>;</span><br><span class="line"></span><br><span class="line">$signer = <span class="keyword">new</span> Sha256(); <span class="comment">// 签名算法</span></span><br><span class="line"><span class="comment">//iss（签发者） , exp（过期时间戳） , sub（面向的用户） , aud（接收方） , iat（签发时间）</span></span><br><span class="line">$token = (<span class="keyword">new</span> Builder())-&gt;setIssuer(<span class="string">'http://example.com'</span>) <span class="comment">// 签发者</span></span><br><span class="line">    -&gt;setAudience(<span class="string">'http://example.org'</span>) <span class="comment">// 接受方</span></span><br><span class="line">    -&gt;setId(<span class="string">'123456'</span>, <span class="keyword">true</span>) <span class="comment">// jwt唯一标识,用作一次性的token</span></span><br><span class="line">    -&gt;setIssuedAt(time()) <span class="comment">// 签发时间</span></span><br><span class="line">    -&gt;setNotBefore(time()+<span class="number">60</span>) <span class="comment">// 能使用的时间</span></span><br><span class="line">    -&gt;setExpiration(time() + <span class="number">3600</span>) <span class="comment">// 过期时间</span></span><br><span class="line">    -&gt;set(<span class="string">'uid'</span>, <span class="number">1</span>) <span class="comment">// 自定义字段</span></span><br><span class="line">    -&gt;sign($signer, <span class="string">'testing'</span>) <span class="comment">// testing为设定的秘钥,这部分没有的话token第三部分会有空</span></span><br><span class="line">    -&gt;getToken();</span><br><span class="line"><span class="keyword">echo</span> (string)$token;</span><br></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ<span class="number">0</span>eXAiOiJKV<span class="number">1</span>QiLCJhbGciOiJIUzI<span class="number">1</span><span class="symbol">NiIsImp0</span>aSI<span class="number">6</span>IjEyMzQ<span class="number">1</span><span class="symbol">NiJ9</span>.eyJpc<span class="number">3</span>MiOiJodHRwOlwvXC<span class="number">9</span>leGFtcGxlLm<span class="symbol">NvbSIsImF1</span>ZCI<span class="number">6</span>Imh<span class="number">0</span>dHA<span class="number">6</span>XC<span class="number">9</span>cL<span class="number">2</span>V<span class="number">4</span>YW<span class="number">1</span>wbGUub<span class="number">3</span>J<span class="symbol">nIiwianRpIjoiMTIzNDU2</span>IiwiaWF<span class="number">0</span>Ijox<span class="symbol">NDk0</span>OTMwODQ<span class="number">5</span>LCJuYmYiOjE<span class="number">0</span>OTQ<span class="number">5</span>MzA<span class="number">5</span>MDksImV<span class="number">4</span>cCI<span class="number">6</span>MTQ<span class="number">5</span><span class="symbol">NDkzNDQ0</span>OSwidWlkIjoxfQ.Ui<span class="number">0</span>lVBJ<span class="number">3</span>X<span class="number">2</span>AP_m_aoMgS<span class="symbol">n_ALCP_iWiSuSiIhRbWXEjs</span></span><br></pre></td></tr></table></figure><h5 id="验证Token"><a href="#验证Token" class="headerlink" title="验证Token"></a>验证Token</h5><p>获取到Token只有对其进行解析,如果是加密的,需要先对其进行有效性和安全验证</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$data</span> = new \Lcobucci\JWT\ValidationData();</span><br><span class="line"><span class="variable">$data</span>-&gt;setIssuer(<span class="string">"http://example.com"</span>);</span><br><span class="line"><span class="variable">$data</span>-&gt;setAudience(<span class="string">"http://example.org"</span>);</span><br><span class="line"><span class="variable">$data</span>-&gt;setId(<span class="string">'123456'</span>);</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$token</span>-&gt;validate(<span class="variable">$data</span>)); <span class="regexp">//</span> <span class="keyword">false</span></span><br><span class="line"><span class="variable">$data</span>-&gt;setCurrentTime(time()+<span class="number">3600</span>);</span><br><span class="line">var_dump(<span class="variable">$token</span>-&gt;validate(<span class="variable">$data</span>)); <span class="regexp">//</span> <span class="keyword">true</span></span><br><span class="line"><span class="variable">$data</span>-&gt;setCurrentTime(time()+<span class="number">4000</span>);</span><br><span class="line">var_dump(<span class="variable">$token</span>-&gt;validate(<span class="variable">$data</span>));  <span class="regexp">//</span> <span class="keyword">false</span> 数据有效性验证</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$token</span>-&gt;verify(<span class="variable">$signer</span>, <span class="string">'test1'</span>)); <span class="regexp">//</span> <span class="keyword">false</span></span><br><span class="line">var_dump(<span class="variable">$token</span>-&gt;verify(<span class="variable">$signer</span>, <span class="string">'testing'</span>)); <span class="regexp">//</span> <span class="keyword">true</span> 签名验证</span><br></pre></td></tr></table></figure><h5 id="解析Token"><a href="#解析Token" class="headerlink" title="解析Token"></a>解析Token</h5><p>当验证通过后,需要解析中间那一部分然后使用,其实自己解析的话就base64反编码一下就好了,所以这部分切记不可传递敏感信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析</span></span><br><span class="line">$token = (<span class="keyword">new</span> Parser())-&gt;parse((string)$token); <span class="comment">// 解析一个token</span></span><br><span class="line">$token-&gt;getHeaders();</span><br><span class="line">$token-&gt;getClaims();</span><br><span class="line">var_dump($token-&gt;getHeader(<span class="string">'jti'</span>)); <span class="comment">// 保留的声明字段</span></span><br><span class="line">var_dump($token-&gt;getClaim(<span class="string">'iss'</span>)); <span class="comment">// 保留的声明字段</span></span><br><span class="line">var_dump($token-&gt;getClaim(<span class="string">'uid'</span>)); <span class="comment">// 自定义的声明字段</span></span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://jwt.io/introduction/" target="_blank" rel="noopener">https://jwt.io/introduction/</a></li><li><a href="https://github.com/lcobucci/jwt/blob/3.2/README.md" target="_blank" rel="noopener">https://github.com/lcobucci/jwt/blob/3.2/README.md</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;理解JWT&quot;&gt;&lt;a href=&quot;#理解JWT&quot; class=&quot;headerlink&quot; title=&quot;理解JWT&quot;&gt;&lt;/a&gt;理解JWT&lt;/h3&gt;&lt;h4 id=&quot;什么是JWT&quot;&gt;&lt;a href=&quot;#什么是JWT&quot; class=&quot;headerlink&quot; title=&quot;什么是JWT&quot;&gt;&lt;/a&gt;什么是JWT&lt;/h4&gt;&lt;p&gt;Json Web token(JWT)是基于开放标准(&lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RFC 7519&lt;/a&gt;)设计的一种紧凑且独立的认证机制.它比较安全,可验证.可以对该token进行加密验证,一般用于用户认证和信息的安全传输上.它比较小,可以传输在URL.POST,参数,http头文件中,它可以携带一些用户自定义的信息.所以它可以用来做接口方面的认证,单点登录的用户认证.&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.frenlee.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="php" scheme="http://blog.frenlee.com/tags/php/"/>
    
      <category term="jwt" scheme="http://blog.frenlee.com/tags/jwt/"/>
    
      <category term="认证" scheme="http://blog.frenlee.com/tags/%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>在CI(codeigniter)框架中使用laravel中的blade模板引擎</title>
    <link href="http://blog.frenlee.com/2017/01/laravel-view-used-in-codeigniter/"/>
    <id>http://blog.frenlee.com/2017/01/laravel-view-used-in-codeigniter/</id>
    <published>2017-01-22T11:17:19.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>用过laravel的人都知道,laravel中的视图模板引擎也很强大,可以继承,可以模块化.</p></blockquote><a id="more"></a><h3 id="引入代码"><a href="#引入代码" class="headerlink" title="引入代码"></a>引入代码</h3><h4 id="composer-引入依赖包"><a href="#composer-引入依赖包" class="headerlink" title="composer 引入依赖包"></a>composer 引入依赖包</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compose <span class="keyword">require</span> philo/laravel-blade</span><br></pre></td></tr></table></figure><h4 id="编写view-函数"><a href="#编写view-函数" class="headerlink" title="编写view 函数"></a>编写view 函数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取视图实例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBladeInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> $blade = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!$blade) &#123;</span><br><span class="line">        $views = <span class="keyword">__DIR__</span> . <span class="string">'/../views'</span>;</span><br><span class="line">        $cache = <span class="keyword">__DIR__</span> . <span class="string">'/../cache'</span>;</span><br><span class="line">        $blade = <span class="keyword">new</span> \Philo\Blade\Blade($views, $cache);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $blade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 视图渲染</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">view</span><span class="params">($name = null, $data = [], $mergeData = [], $getView=false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $blade = getBladeInstance();</span><br><span class="line">    setPaginator();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($data[<span class="string">'urlParam'</span>])) $data[<span class="string">'urlParam'</span>] = array_filter($data[<span class="string">'urlParam'</span>]);</span><br><span class="line">    $html = $blade-&gt;view()-&gt;make($name, $data, $mergeData)-&gt;render();</span><br><span class="line">    <span class="keyword">if</span> ($getView) &#123;</span><br><span class="line">        <span class="keyword">return</span> $html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> $html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取当前url 地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCurrentUrl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$scheme = \Util::isHTTPS() ? <span class="string">'https://'</span> : <span class="string">'http://'</span>;</span><br><span class="line">    $url = $scheme.$_SERVER[<span class="string">'SERVER_NAME'</span>].$_SERVER[<span class="string">'REQUEST_URI'</span>];</span><br><span class="line">    $urls = explode(<span class="string">'?'</span>, $url, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($urls[<span class="number">1</span>])) &#123;</span><br><span class="line">        $urls[<span class="number">1</span>] = ltrim(preg_replace(<span class="string">'/[&amp;]?page=\d*/'</span>, <span class="string">''</span> ,$urls[<span class="number">1</span>]), <span class="string">'&amp;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rtrim(implode(<span class="string">'?'</span>, $urls),<span class="string">'?'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻页参数设置  这个函数最好在MY_Controller的构造函数中调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setPaginator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">\Illuminate\Pagination\Paginator::viewFactoryResolver(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> getBladeInstance();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前页面</span></span><br><span class="line">\Illuminate\Pagination\Paginator::currentPageResolver(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_get($_GET, <span class="string">'page'</span>, <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置当前url 地址</span></span><br><span class="line">\Illuminate\Pagination\Paginator::currentPathResolver(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getCurrentUrl();</span><br><span class="line">&#125;);</span><br><span class="line">\Illuminate\Pagination\Paginator::defaultView(<span class="string">'paginate'</span>); <span class="comment">// 翻页视图模板在哪</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips 最好是单独写成类这样会比较通用</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p>直接调用view 函数</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">view</span>(<span class="string">'blade.path'</span>, <span class="string">'data'</span>, <span class="string">'data'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;用过laravel的人都知道,laravel中的视图模板引擎也很强大,可以继承,可以模块化.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="php" scheme="http://blog.frenlee.com/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.frenlee.com/tags/php/"/>
    
      <category term="laravel" scheme="http://blog.frenlee.com/tags/laravel/"/>
    
      <category term="blade" scheme="http://blog.frenlee.com/tags/blade/"/>
    
  </entry>
  
  <entry>
    <title>在CI(codeigniter)框架中使用laravel的illuminate/database</title>
    <link href="http://blog.frenlee.com/2017/01/laravel-database-use-in-codeigniter/"/>
    <id>http://blog.frenlee.com/2017/01/laravel-database-use-in-codeigniter/</id>
    <published>2017-01-20T11:07:43.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>  当你使用过laravel中的ORM(对象关系映射)数据库组件,你就再也无法忍受类似于CI中那种数据库的操作模式.所以被迫在CI中集成了laravel数据库的组件,如果你是多个项目基于相同的数据库开发的,你可以共用这一套数据库操作,简直很方便!</p><a id="more"></a><h3 id="引入代码"><a href="#引入代码" class="headerlink" title="引入代码"></a>引入代码</h3><h4 id="使用composer引入illuminate-database-代码"><a href="#使用composer引入illuminate-database-代码" class="headerlink" title="使用composer引入illuminate/database 代码"></a>使用composer引入illuminate/database 代码</h4><blockquote><p>在此之前你是需要有php composer 以及基于ci创建了项目的.关于composer 下载慢的问题,可以移步&lt; <a href="http://www.phpcomposer.com/" target="_blank" rel="noopener">composer中文网</a> &gt;<br>在这里当然少不了翻页的操作,所以得引入pagination组件</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compose <span class="keyword">require</span> illuminate/database</span><br><span class="line">compose <span class="keyword">require</span> illuminate/pagination</span><br></pre></td></tr></table></figure><blockquote><p>加载完后记得将vendor/autoload.php 这个文件加入到你的ci项目的index.php 文件中,或者在config/config.php 文件中的<br><code>composer_autoload</code> 配置中配置好你的vendor/autoload.php 的路径</p></blockquote><h4 id="创建Model父类"><a href="#创建Model父类" class="headerlink" title="创建Model父类"></a>创建Model父类</h4><blockquote><p>其他数据表模型的类的创建将继承自这个类,当然这些文件的存放你可以放在你的CI项目中,也可以放在别的地方,你可以通过psr4标准来创建加载,或者自己编写自动加载类和方法来加载都行.我将这个Model类命名为Model,它继承自\Illuminate\Database\Eloquent\Model类,代码如下</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">M</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据模型基础</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">DatabaseManager</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Builder</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Events</span>\<span class="title">Dispatcher</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Container</span>\<span class="title">Container</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Capsule</span>\<span class="title">Manager</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Pagination</span>\<span class="title">LengthAwarePaginator</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Pagination</span>\<span class="title">Paginator</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span> <span class="keyword">extends</span> \<span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Manager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $db = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数 初始化数据库链接的一些参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;init();</span><br><span class="line">        Carbon::setLocale(<span class="string">'zh'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="string">'human_create_time'</span>, <span class="string">'human_update_time'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;addHidden(<span class="string">'human_create_time'</span>, <span class="string">'human_update_time'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化数据库连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> $capsule = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!$capsule) &#123;</span><br><span class="line">            $capsule = <span class="keyword">new</span> Manager();</span><br><span class="line">            <span class="keyword">if</span>($connections = \DatabaseConfig::config()) &#123;</span><br><span class="line">                <span class="keyword">foreach</span> ($connections <span class="keyword">as</span> $key=&gt; $connection) &#123;</span><br><span class="line">                    $capsule-&gt;addConnection($connection, $key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            $capsule-&gt;getDatabaseManager()-&gt;setDefaultConnection(<span class="string">'db_user'</span>);</span><br><span class="line">            $capsule-&gt;setEventDispatcher(<span class="keyword">new</span> Dispatcher(<span class="keyword">new</span> Container));</span><br><span class="line">            $capsule-&gt;setAsGlobal();</span><br><span class="line">            $capsule-&gt;bootEloquent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db = $capsule;</span><br><span class="line">        <span class="keyword">return</span> $capsule;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置页数翻页页数 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">page</span><span class="params">($page  = <span class="number">1</span>, $url = false)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Paginator::currentPathResolver(<span class="function"><span class="keyword">function</span> <span class="params">()</span><span class="title">use</span><span class="params">($url)</span> </span>&#123;</span><br><span class="line">            $scheme = \Util::isHTTPS() ? <span class="string">'https://'</span> : <span class="string">'http://'</span>;</span><br><span class="line">            $url = $url ? : $scheme.$_SERVER[<span class="string">'SERVER_NAME'</span>].$_SERVER[<span class="string">'REQUEST_URI'</span>];</span><br><span class="line">            $urls = explode(<span class="string">'?'</span>, $url, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($urls[<span class="number">1</span>])) &#123;</span><br><span class="line">                $urls[<span class="number">1</span>] = ltrim(preg_replace(<span class="string">'/[&amp;]?page=\d*/'</span>, <span class="string">''</span> ,$urls[<span class="number">1</span>]), <span class="string">'&amp;'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> rtrim(implode(<span class="string">'?'</span>, $urls),<span class="string">'?'</span>);</span><br><span class="line"><span class="comment">//            return 'http://'.$_SERVER['SERVER_NAME'].preg_replace('/[?&amp;]page=\d*/', '' ,$_SERVER['REQUEST_URI']);</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Paginator::currentPageResolver(<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="title">use</span><span class="params">($page)</span></span>&#123;</span><br><span class="line">           <span class="keyword">return</span> $page;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用原生的sql语句 相当于于DB::raw()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">raw</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;db-&gt;getDatabaseManager()-&gt;raw($data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数据翻页使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">paginate</span><span class="params">(LengthAwarePaginator $data, $appends = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $window = \Illuminate\Pagination\UrlWindow::make($data-&gt;appends($appends));</span><br><span class="line">        $elements = [</span><br><span class="line">            $window[<span class="string">'first'</span>],</span><br><span class="line">            is_array($window[<span class="string">'slider'</span>]) ? <span class="string">'...'</span> : <span class="keyword">null</span>,</span><br><span class="line">            $window[<span class="string">'slider'</span>],</span><br><span class="line">            is_array($window[<span class="string">'last'</span>]) ? <span class="string">'...'</span> : <span class="keyword">null</span>,</span><br><span class="line">            $window[<span class="string">'last'</span>],</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">return</span> $elements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tips: 以下三个方法主要是用来格式化一些时间字段,如果不需要可以删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHumanCreateTimeAttribute</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;create_time-&gt;diffForHumans();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHumanUpdateTimeAttribute</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;update_time-&gt;diffForHumans();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人性化时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> LengthAwarePaginator $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">humanTimes</span><span class="params">($data, $key, \Closure $closure = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $keys = is_string($key) ? [$key] : $key;</span><br><span class="line"></span><br><span class="line">        $for = <span class="function"><span class="keyword">function</span><span class="params">($keys, $item, $closure)</span></span>&#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($keys <span class="keyword">as</span> $key) &#123;</span><br><span class="line">                Carbon::createFromTimestamp(strtotime($item-&gt;$key));</span><br><span class="line">                $item-&gt;&#123;<span class="string">'human_'</span>.$key&#125; = $item-&gt;$key-&gt;diffForHumans();</span><br><span class="line">            &#125;</span><br><span class="line">            $closure &amp;&amp; $closure($item);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($data <span class="keyword">instanceof</span> LengthAwarePaginator) &#123;</span><br><span class="line">            $data-&gt;each(<span class="function"><span class="keyword">function</span><span class="params">($item)</span><span class="title">use</span><span class="params">($keys, $closure, $for)</span></span>&#123;</span><br><span class="line">                $for($keys, $item, $closure);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $for($keys, $data, $closure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> DEFAULT_CONN = <span class="string">'默认数据库链接数组key'</span>;</span><br><span class="line">    <span class="keyword">static</span> $testHostName = <span class="string">'host'</span>;</span><br><span class="line">    <span class="keyword">static</span> $testUsername = <span class="string">'root'</span>;</span><br><span class="line">    <span class="keyword">static</span> $testPassword = <span class="string">'password'</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 获取配置文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">config</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $host = <span class="keyword">static</span>::$hostname;</span><br><span class="line">        $username = <span class="keyword">static</span>::$username;</span><br><span class="line">        $password = <span class="keyword">static</span>::$password;</span><br><span class="line">        $con = compact(<span class="string">'host'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可设置多个数据库连接</span></span><br><span class="line">        $connections = [</span><br><span class="line">            <span class="string">'db_user'</span> =&gt; [<span class="string">'database'</span> =&gt; <span class="string">'db'</span>] + $con,</span><br><span class="line">        ];</span><br><span class="line">        $template = [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'mysql'</span>,</span><br><span class="line">            <span class="string">'host'</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">            <span class="string">'port'</span> =&gt; <span class="string">'3306'</span>,</span><br><span class="line">            <span class="string">'database'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">            <span class="string">'username'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">            <span class="string">'password'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">            <span class="string">'charset'</span> =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">            <span class="string">'collation'</span> =&gt; <span class="string">'utf8_unicode_ci'</span>,</span><br><span class="line">            <span class="string">'prefix'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">            <span class="string">'strict'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">'engine'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($connections <span class="keyword">as</span> &amp;$connection) &#123;</span><br><span class="line">            $connection = array_merge($template, $connection);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $connections;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据模型"><a href="#创建数据模型" class="headerlink" title="创建数据模型"></a>创建数据模型</h3><blockquote><p>如果你的数据库是之前就存在的,和Laravel的数据库设计默认标准有所出入,则需要在创建模型的时候需要设定一些值</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">M</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">M</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigItem</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 可填充字段</span></span><br><span class="line">    <span class="keyword">protected</span> $fillable = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表名</span></span><br><span class="line">    <span class="keyword">protected</span> $table = <span class="string">'config_item'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间戳</span></span><br><span class="line">    <span class="keyword">public</span> $timestamps = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链接名称</span></span><br><span class="line">    <span class="keyword">protected</span> $connection = <span class="string">'db_user'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 个数转换</span></span><br><span class="line">    <span class="keyword">protected</span> $casts = [<span class="string">'value'</span> =&gt; <span class="string">'array'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p>它的使用请参考laravel中的database 使用</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页数据获取 这个是需要代码写在使用的地方的,不会自动调用</span></span><br><span class="line">\M\User\ConfigItem::page(array_get($urlParam, <span class="string">'page'</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;  当你使用过laravel中的ORM(对象关系映射)数据库组件,你就再也无法忍受类似于CI中那种数据库的操作模式.所以被迫在CI中集成了laravel数据库的组件,如果你是多个项目基于相同的数据库开发的,你可以共用这一套数据库操作,简直很方便!&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://blog.frenlee.com/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.frenlee.com/tags/php/"/>
    
      <category term="laravel" scheme="http://blog.frenlee.com/tags/laravel/"/>
    
      <category term="database" scheme="http://blog.frenlee.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>申请免费的https证书--从Let&#39;s Encrypt中</title>
    <link href="http://blog.frenlee.com/2016/12/https-lets-encrypt/"/>
    <id>http://blog.frenlee.com/2016/12/https-lets-encrypt/</id>
    <published>2016-12-08T14:17:15.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>  从2017年开始苹果开发中强制使用https的链接了,而且从目前形势来看https的阵容越来越来,在网上找了很多申请https的证书的方式,很大部分是需要费用的,看到了一个<a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a> 中申请是不需要费用的,不过它的证书有效期只有90天,不过可喜的是它可以通过脚本来进行自动跟新.</p><a id="more"></a><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>  安装过程是使用的<a href="https://github.com/lukas2511/dehydrated" target="_blank" rel="noopener">dehydrated</a> 安装的步骤如下:</p><p>1.下载执行脚本</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="regexp">/etc/</span>dehydrated</span><br><span class="line">cd <span class="regexp">/etc/</span>dehydrated/</span><br><span class="line">curl -LO <span class="string">https:</span><span class="comment">//raw.githubusercontent.com/lukas2511/dehydrated/master/dehydrated</span></span><br><span class="line">chmod <span class="number">755</span> dehydrated</span><br></pre></td></tr></table></figure><p>2.创建配置文件以及建立验证过程中所需要的目录</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在 /etc/dehydrated 目录下</span></span><br><span class="line">mkdir -p <span class="string">/var/www/dehydrated</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"WELLKNOWN=/var/www/dehydrated"</span> &gt; <span class="string">/etc/dehydrated/config</span></span><br></pre></td></tr></table></figure><p>3.修改nginx 或者 Apache 服务器配置</p><blockquote><p>在你需要https 的域名的服务器配置中修改,配置好后你可以再<code>/var/www/deydrated/</code>这个目录下添加一个文件,然后通过域名访问,验证下是否可以访问,不可访问时将在后续生成证书会失败!</p></blockquote><ul><li>nginx</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">/.well-known</span>/acme-challenge/ &#123;</span><br><span class="line">  alias /var/www/dehydrated/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Apache</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alias <span class="regexp">/.well-known/</span>acme-challenge<span class="regexp">/ /</span>var<span class="regexp">/www/</span>dehydrated<span class="regexp">/</span></span><br></pre></td></tr></table></figure><blockquote><p>配置好后重启或者reload 服务器配置文件</p></blockquote><p>4.生成SSL certificate 证书</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/dehydrated/dehyrated -c -d your<span class="selector-class">.domain</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><ul><li>成功时响应为</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/dehydrated/dehydrated -c -d your.domain.com</span><br><span class="line"><span class="comment"># INFO: Using main config file /etc/dehydrated/config</span></span><br><span class="line">Processing www.qicheng51.com</span><br><span class="line"> + Signing domains<span class="built_in">..</span>.</span><br><span class="line"> + Generating private key<span class="built_in">..</span>.</span><br><span class="line"> + Generating signing request<span class="built_in">..</span>.</span><br><span class="line"> + Requesting challenge <span class="keyword">for</span> www.qicheng51.com<span class="built_in">..</span>.</span><br><span class="line"> + Responding <span class="keyword">to</span> challenge <span class="keyword">for</span> www.qicheng51.com<span class="built_in">..</span>.</span><br><span class="line"> + Challenge is valid!</span><br><span class="line"> + Requesting certificate<span class="built_in">..</span>.</span><br><span class="line"> + Checking certificate<span class="built_in">..</span>.</span><br><span class="line"> + Done!</span><br><span class="line"> + Creating fullchain.pem<span class="built_in">..</span>.</span><br><span class="line"> + Done!</span><br></pre></td></tr></table></figure><blockquote><p>成功后会在<code>/etc/dehydrated/certs</code> 目录下有个your.domain.com 的文件夹,文件夹中有你需要的证书<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">fullchain</span><span class="selector-class">.pem</span></span><br><span class="line"><span class="selector-tag">privkey</span><span class="selector-class">.pem</span></span><br></pre></td></tr></table></figure></p></blockquote><p>5.配置https服务器解析</p><blockquote><p>这里只写下nginx 的配置,相对80的配置而言,需要修改下监听端口,然后加入下面的配置&lt;Apache的配置问题请自行解决&gt;</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">listen <span class="number">443</span>;</span><br><span class="line">ssl on;</span><br><span class="line">ssl_certificate <span class="regexp">/etc/</span>dehydrated<span class="regexp">/certs/</span>your.domain.com/fullchain.pem;</span><br><span class="line">ssl_certificate_key <span class="regexp">/etc/</span>dehydrated<span class="regexp">/certs/</span>your.domain.com/privkey.pem;</span><br><span class="line">ssl_session_timeout <span class="number">30</span>m;</span><br><span class="line">ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;</span><br><span class="line">ssl_ciphers <span class="string">AESGCM:</span><span class="string">ALL:</span>!<span class="string">DH:</span>!<span class="string">EXPORT:</span>!<span class="string">RC4:</span>+<span class="string">HIGH:</span>!<span class="string">MEDIUM:</span>!<span class="string">LOW:</span>!<span class="string">aNULL:</span>!eNULL;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br></pre></td></tr></table></figure><p>6.重启服务器</p><blockquote><p> 你就可以通过https 访问你的域名了</p></blockquote><p>7.加入定时器自动更新证书</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># crontab -e</span></span><br><span class="line">0 0 * * * root sleep $(expr $(printf <span class="string">"\%d"</span> <span class="string">"0x<span class="variable">$(hostname | md5sum | cut -c 1-8)</span>"</span>) \% 86400); ( /etc/dehydrated/dehydrated -c -d your.domain.com; /usr/sbin<span class="built_in">/service </span>nginx reload ) &gt; /tmp/your.domain.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><blockquote><p>nginx 重新获取配置文件<code>/usr/sbin/service nginx reload</code>根据自己的实际情况进行修改,sleep 是使命令随机睡眠一段时间,避免let’s encrypt服务器在0点时压力过大,还有就是dehydrated会自己判断是否快过期,快过期是不会renew证书的,所以定时器每天一次是没问题的.(命令中\%是cron 中%需要转义)</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;  从2017年开始苹果开发中强制使用https的链接了,而且从目前形势来看https的阵容越来越来,在网上找了很多申请https的证书的方式,很大部分是需要费用的,看到了一个&lt;a href=&quot;https://letsencrypt.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Let’s Encrypt&lt;/a&gt; 中申请是不需要费用的,不过它的证书有效期只有90天,不过可喜的是它可以通过脚本来进行自动跟新.&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://blog.frenlee.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="nginx" scheme="http://blog.frenlee.com/tags/nginx/"/>
    
      <category term="https" scheme="http://blog.frenlee.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>使用七牛云CDN加速github.io网站</title>
    <link href="http://blog.frenlee.com/2016/11/qiniu-cdn-github-io/"/>
    <id>http://blog.frenlee.com/2016/11/qiniu-cdn-github-io/</id>
    <published>2016-11-29T21:17:35.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>  当使用github.io 做博客存储时,发现在国内访问很慢,而且当你绑定了自己的域名时,经常会出现无法访问的情况,我使用的是dnspod 做的域名解析,所以经常会受到dnspod 发送的无法访问的邮件,于是乎,想到了用CDN做一个缓存,加速网站的访问,然后就看上了七牛的CDN服务,就是干.(其实很简单)</p><a id="more"></a><h3 id="七牛上创建一个融合云CDN服务"><a href="#七牛上创建一个融合云CDN服务" class="headerlink" title="七牛上创建一个融合云CDN服务"></a>七牛上创建一个融合云CDN服务</h3><blockquote><p>PS:使用七牛融合云CDN是因为七牛每个月都有10GB的免费流量.</p></blockquote><p>  在七牛侧边栏菜单可看到 &lt;融合云CDN&gt;,进去之后直接点击添加就好了.<br>  <img src="/images/portal.qiniu.com_domain_create.png" alt="七牛云"><br>  这里要注意下的就是填写的参数:<br>  加速域名: 就是你需要加速的域名,属于自己的域名<br>  覆盖范围: 这个就是CDN的覆盖范围,选择中国大陆就好,一般国外也用不着<br>  源站配置: 这里选择源站域名,这里域名就填你github.io的域名,测试源站资源,填写一个你github.io上有的资源的地址就好<br>  好了,其他的基本上就不用管了,提交就只要坐等了.</p><p>  一般是24小时之内才会生成CNAME信息,<br>  <img src="/images/qiniucname.jpeg" alt="七牛CNAME"></p><h3 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h3><p>  等CNAME生成后,进入你的域名解析的地方,添加一条CNAME的域名解析就好了<br>  <img src="/images/cnamedns.jpeg" alt="域名解析"><br>  记录为你解析的域名的值,记录类型为CNAME,记录值就是七牛CDN提供的CNAME了</p><h3 id="补充-github-io-绑定域名"><a href="#补充-github-io-绑定域名" class="headerlink" title="补充:github.io 绑定域名"></a>补充:github.io 绑定域名</h3><p>  在你的github.io项目的根目录下添加一个CNAME的文件,没有任何后缀,里面放入的你域名名称即可.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;  当使用github.io 做博客存储时,发现在国内访问很慢,而且当你绑定了自己的域名时,经常会出现无法访问的情况,我使用的是dnspod 做的域名解析,所以经常会受到dnspod 发送的无法访问的邮件,于是乎,想到了用CDN做一个缓存,加速网站的访问,然后就看上了七牛的CDN服务,就是干.(其实很简单)&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.frenlee.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="cdn" scheme="http://blog.frenlee.com/tags/cdn/"/>
    
      <category term="github" scheme="http://blog.frenlee.com/tags/github/"/>
    
      <category term="七牛云" scheme="http://blog.frenlee.com/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>gitflow的应用</title>
    <link href="http://blog.frenlee.com/2016/11/git-flow/"/>
    <id>http://blog.frenlee.com/2016/11/git-flow/</id>
    <published>2016-11-17T23:15:21.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>  git flow 是git的一个扩展,高版本的git一般都自带这个功能,它可以使团队高效的进行版本管理,可以方便的使用git的分支开发,从而省去checkout 分支,merge分支的操作!</p><a id="more"></a><p>  在使用git版本操作时,一般都会有多个分支,一个主分支(一般使用master),用户发布版本,一个开发分支(develop),开发时从develop分支checkout一个新的分支开发新的特性,开发完成后合并到开发分支,测试通过后合并到主分支,当有bug测试版本有bug时,可以从开发分支切一个分支出来进行修复然后合并到开发分支,当发布版本后有bug时,从主分支切一个分支出来进行修复,然后合并到主分支和开发分支.使用git flow 可以有效的帮助你完成这些操作.<a href="https://github.com/nvie/gitflow" target="_blank" rel="noopener">gitflow 仓库地址</a></p><h3 id="git-flow的安装"><a href="#git-flow的安装" class="headerlink" title="git flow的安装"></a>git flow的安装</h3><blockquote><p>git flow 可以工作在各大操作系统下,OSX,Linux,Window,如果在命令行运行 git flow 发现git 没有自带git flow 时,可以自行安装.</p></blockquote><h4 id="OSX中安装"><a href="#OSX中安装" class="headerlink" title="OSX中安装"></a>OSX中安装</h4><p>  <code>brew install git-flow-avh</code></p><h4 id="Linux中安装"><a href="#Linux中安装" class="headerlink" title="Linux中安装"></a>Linux中安装</h4><p>  <code>apt-get install git-flow</code></p><h4 id="window中安装"><a href="#window中安装" class="headerlink" title="window中安装"></a>window中安装</h4><p>  可参见 <a href="https://github.com/nvie/gitflow/wiki/Windows" target="_blank" rel="noopener">gitflow windows安装帮助文档</a></p><h3 id="git-flow-的使用"><a href="#git-flow-的使用" class="headerlink" title="git flow 的使用"></a>git flow 的使用</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>使用git-flow,需要开始从git库初始化git flow.使用<br><code>git flow init</code><br>初始化,如果你是刚开始的一个版本你一直回车下去就好,如果你原本就存在一些分支,你只需要在对应的地方输入你的分支名称即可.初始化完成后你就可以进行下面的操作.</p><h4 id="开发新特性"><a href="#开发新特性" class="headerlink" title="开发新特性"></a>开发新特性</h4><p>  新特性是从develop开发分支切换出来的,用于开发一些新的功能:<br>  <code>git flow feature start 名称</code><br>  这个操作会develop分支中切出新的分支,然后切换到改分支下.</p><hr><p>  当你完成了该功能的开发,你就需要将改分支合并到开发分支下:<br>  <code>git flow feature finish [名称]</code><br>  这个操作会将新的分支合并到develop分支下,并删除该分支,切换回develop开发分支下.</p><hr><p>  当然如果你没有完成该分支,或者需要别人接手开发这个功能,你可以将这个分支发布到远程仓库中:<br>  <code>git flow feature publish [名称]</code><br>  这样别人就可以获取到这个分支的代码:<br>  <code>git flow feature track 名称</code>,也可以使用 <code>git flow feature pull origin 名称</code><br>  这样就可以把这个分支从远程仓库拉到本地,并切换到这个分支.</p><h3 id="释放版本"><a href="#释放版本" class="headerlink" title="释放版本"></a>释放版本</h3><p>  当你完成了开发,需要将开发的功能合并到主分支时,你可以使用<br>  <code>git flow release start 版本号</code><br>  这个命令将从develop开发分支中切换出一个版本.</p><hr><p>  同时,如果你需要将这个分支发布的话,你可以使用<br>  <code>git flow release publish [版本号]</code><br>  来将这个分支发布到远程仓库.然后别人就可以使用<br>  <code>git flow release track 版本号</code><br>  来拉取这个分支,做一些操作.</p><hr><p>  当操作完成时,可以将release分支合并到master,develop分支下.<br>  <code>git flow release finish 版本号</code><br>  然后在master和develop中将代码push到远程仓库中即可.</p><h3 id="修复开发bug"><a href="#修复开发bug" class="headerlink" title="修复开发bug"></a>修复开发bug</h3><p>  当你代码已经从特性合并到开发分支时,发的bug你可以使用bugfix 这个操作切出分支来进行修复.<br>  <code>git flow bugfix start 名称</code><br>  完成后使用<br>  <code>git flow bugfix finish 名称</code><br>  来将修复后的代码合并到develop分支中,同时也可以使用<br>  <code>git flow bugfix publish 名称</code>,<code>git flow bugfix track 名称</code><br>  来发布和拉取这个分支</p><h3 id="修复线上bug"><a href="#修复线上bug" class="headerlink" title="修复线上bug"></a>修复线上bug</h3><p>  当你发现发布后的代码时,你可以使用<br>  <code>git flow hotfix start 版本号</code><br>  来从master 版本中切出分支进行修复,版本后你可以使用你发布的版本号来进行命名,例如发布的版本号为v1.0.0 那么你这个版本号可以使用 1.0.1 来命名.</p><hr><p>  修复完成后,使用<br>  <code>git flow hotfix finish [版本号]</code><br>  来进行合并,这个合并将会把修复后的代码合并到master分支和develop分支中.</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  使用git flow 可以很轻松的切出合并版本,在合并后记得在相应的分支下进行push.<br>  其实git flow 用起来很简单大概命令就是<br>  <figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git flow init 初始化</span><br><span class="line">git flow feature [start|<span class="type">finish</span>|<span class="type">publish</span>|<span class="type">track</span>] 新特新开发操作</span><br><span class="line">git flow bugfix [start|<span class="type">finish</span>|<span class="type">publish</span>|<span class="type">track</span>] 开发bug修复操作</span><br><span class="line">git flow hotfix [start|<span class="type">finish</span>|<span class="type">publish</span>|<span class="type">track</span>] 线上bug修复操作</span><br><span class="line">git flow release [start|<span class="type">finish</span>|<span class="type">publish</span>|<span class="type">track</span>] 发布版本操作</span><br></pre></td></tr></table></figure></p><p>  当然,在使用git flow 的同时git的其他命令也是一样可以使用的.这就是关于git flow 工具使用的大概流程.</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="noopener">gitflow备忘清单</a><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="noopener">http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html</a></li><li><a href="https://github.com/nvie/gitflow" target="_blank" rel="noopener">gitflow 源码仓库</a><a href="https://github.com/nvie/gitflow" target="_blank" rel="noopener">https://github.com/nvie/gitflow</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;  git flow 是git的一个扩展,高版本的git一般都自带这个功能,它可以使团队高效的进行版本管理,可以方便的使用git的分支开发,从而省去checkout 分支,merge分支的操作!&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.frenlee.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://blog.frenlee.com/tags/git/"/>
    
      <category term="git-flow" scheme="http://blog.frenlee.com/tags/git-flow/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo+gitlab+ci+github Pages 持续集成写博客</title>
    <link href="http://blog.frenlee.com/2016/11/hexo-gitlab-ci/"/>
    <id>http://blog.frenlee.com/2016/11/hexo-gitlab-ci/</id>
    <published>2016-11-16T15:25:07.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>  使用hexo 写博客最爽的是莫过于可以用markdown来写,可以不用像wordpress一样写作时还要注意排版,可以安心的写一些东西,然而hexo也有比较烦的东西,每次需要生成静态文件,然后再发布,网上看了一些关于hexo持续集成的帖子,然后这里总结下.</p><a id="more"></a><p>  这里使用的是gitlab 仓库来存储博客源码,这样的你的文章就不会被别人轻而易举的复制走了,gitlab 中自带有Continuous Integration(CI)持续集成,通过持续集成生成静态文件,使用git自动发布到github Pages上,这样以后写文章就只要完成markdown这一部分就OK了.</p><h3 id="hexo-的安装"><a href="#hexo-的安装" class="headerlink" title="hexo 的安装"></a>hexo 的安装</h3><p>  关于hexo的安装请移步 <a href="https://hexo.io/" target="_blank" rel="noopener">hexo官网</a></p><h3 id="gitlab-准备"><a href="#gitlab-准备" class="headerlink" title="gitlab 准备"></a>gitlab 准备</h3><blockquote><p>申请账号,创建私有创库 </p></blockquote><p>  关于账号的申请请移步 <a href="https://about.gitlab.com/" target="_blank" rel="noopener">gitlab官网</a>, 国外网站,不科学上网的话有点………..慢.</p><p>  <img src="/images/20161116154715.png" alt="gitlab账号申请"></p><p>  申请完毕后登陆,然后创建一个私有创库<br>  <img src="/images/20161116155624.png" alt="gitlab仓库创建"></p><h3 id="github-准备"><a href="#github-准备" class="headerlink" title="github 准备"></a>github 准备</h3><ul><li>创建github账号,创建同用户相同的项目,例如: 用户名为skyling,创建项目仓库名称为 skyling.github.io ,这样你访问skyling.github.io的时候就会访问到这个项目下的内容了</li><li>获取到github 的 Personal Access Token,获取到生成的Personal Access Token,并复制保存下来,因为下次是不可见了的<br><img src="/images/20161116160310.png" alt="githubAccessToken获取"><br><img src="/images/20161116160413.png" alt="githubAccessToken获取"></li></ul><h3 id="在本地将hexo项目添加到gitlab仓库中"><a href="#在本地将hexo项目添加到gitlab仓库中" class="headerlink" title="在本地将hexo项目添加到gitlab仓库中"></a>在本地将hexo项目添加到gitlab仓库中</h3><ul><li>在本地hexo项目文件中,将私有创库地址添加进去</li><li>在hexo项目根目录下创建gitlab ci持续集成配置  .gitlab-ci.yml<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">image</span>: node:4.2.2</span><br><span class="line"></span><br><span class="line"><span class="attribute">pages:</span></span><br><span class="line">  cache:</span><br><span class="line">    <span class="attribute">paths:</span></span><br><span class="line">    - node_modules/</span><br><span class="line"></span><br><span class="line">  <span class="attribute">script:</span></span><br><span class="line">  - npm install hexo-cli -g</span><br><span class="line">  - npm install hexo-generator-feed --save</span><br><span class="line">  - npm install</span><br><span class="line">  - hexo g</span><br><span class="line">  - cd ./public</span><br><span class="line">  - git init</span><br><span class="line">  - git config --global user.email "github登录用户名或者邮箱" ## git配置</span><br><span class="line">  - git config --global user.name "github用户名" ## git配置 </span><br><span class="line">  - git config --global push.default simple</span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m "auto-deploy" ## 这里配置你的git提交备注</span><br><span class="line">  - git push --force --quiet --set-upstream https://github access token@github.com/github用户名/github用户名.github.io.git master ## github仓库地址</span><br><span class="line">  <span class="attribute">artifacts:</span></span><br><span class="line">    paths:</span><br><span class="line">    - public</span><br><span class="line">  <span class="attribute">only:</span></span><br><span class="line">  - master</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这里比较重要的就是最后那个githuab 仓库的地址设置了,你可以复制你github ssh 的地址,例如: <a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:skyling/skyling.github.io.git <code>然后把最前面的</code>git<code>修改成</code>github 的Personal Access Token<code>,然后将</code>:<code>修改成</code>/<code>,最后在地址加上</code>https://` 将ssh地址修改为https 地址,这样才能正确的提交到github仓库</p></blockquote><h3 id="写作-提交到gitlab仓库"><a href="#写作-提交到gitlab仓库" class="headerlink" title="写作,提交到gitlab仓库"></a>写作,提交到gitlab仓库</h3><p>  使用hexo 进行写作,然后使用git将***.md文件提交到gitlab 仓库,几分钟后你就可以看到它已经生产静态的html文件提交到了github上,当然这中间可能会出错,你可以进入gitlab中你的项目中,看看持续集成过程错误在哪,然后反复修改到正确吧<br>  <img src="/images/20161116161723.png" alt="gitlab CI"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  使用gitlab + hexo 持续集成到github,这样你可以不需要每次都拷贝这自己的工程到处走,无论你在哪,你都可以随时随地的去写博客,同时,你也可以直接到gitlab上去写markdown源文件,然后然后提交网页上提交到仓库里,这样也是一样可行的.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;  使用hexo 写博客最爽的是莫过于可以用markdown来写,可以不用像wordpress一样写作时还要注意排版,可以安心的写一些东西,然而hexo也有比较烦的东西,每次需要生成静态文件,然后再发布,网上看了一些关于hexo持续集成的帖子,然后这里总结下.&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.frenlee.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://blog.frenlee.com/tags/hexo/"/>
    
      <category term="gitlab" scheme="http://blog.frenlee.com/tags/gitlab/"/>
    
      <category term="ci" scheme="http://blog.frenlee.com/tags/ci/"/>
    
      <category term="github Pages" scheme="http://blog.frenlee.com/tags/github-Pages/"/>
    
  </entry>
  
  <entry>
    <title>用户密码的设置</title>
    <link href="http://blog.frenlee.com/2016/04/auth-password-set/"/>
    <id>http://blog.frenlee.com/2016/04/auth-password-set/</id>
    <published>2016-04-14T14:54:59.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>  密码的存储在一个程序中是很重要的一部分,一方面要保证其传输的安全,一方面要保证其存储的安全,虽然说这些都不能做到绝对的安全,但至少可以通过技术来减少安全问题.</p><a id="more"></a><p> 下面记录下最近学习到的一个关于密码设置的知识点.</p><h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><p>  为了防止暴库,所以在密码存储时加盐,然后密码的存储使用md5加密,前端密码传输也使用明文密码加密后的字符串.</p><h3 id="逻辑实现"><a href="#逻辑实现" class="headerlink" title="逻辑实现"></a>逻辑实现</h3><h4 id="DB中"><a href="#DB中" class="headerlink" title="DB中"></a>DB中</h4><p>  在db中,密码的存储是这样的, <code>s=md5(password + salt)</code>,其中<code>password</code>是前端传递过来的密码,一般为加密过后的字符串,当然在这个密码md5加密过程可以更加复杂.<code>salt</code>和<code>s</code>存储在数据库.</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><strong>1.注册时</strong></p><pre><code>注册时直接传送md5(用户输入)</code></pre><p><strong>2.登录时</strong> </p><pre><code>1. 从页面传来的密码字段是这样的   md5（md5（md5(pw)+salt）+ 随机数K） = P2. PHP后台接收到P，从DB里取出该用户的密码S，做校验 if( md5(S + 随机数K） == P)</code></pre><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="后台代码-PHP-的实现"><a href="#后台代码-PHP-的实现" class="headerlink" title="后台代码(PHP)的实现"></a>后台代码(PHP)的实现</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">password</span><span class="params">($password, $oPassword = false, $salt = false, $random = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($oPassword &amp;&amp; $random &amp;&amp; $salt) &#123;</span><br><span class="line">        <span class="keyword">return</span> strcasecmp($password, md5($oPassword . $random)) === <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $salt = Util::randomStr(<span class="number">12</span>);</span><br><span class="line">        $password = md5($password . $salt);</span><br><span class="line">        <span class="keyword">return</span> compact(<span class="string">'password'</span>, <span class="string">'salt'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机值得生产</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">randomStr</span><span class="params">($length = <span class="number">6</span> , $numeric = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PHP_VERSION &lt; <span class="string">'4.2.0'</span> &amp;&amp; mt_srand((double)microtime() * <span class="number">1000000</span>);</span><br><span class="line">    <span class="keyword">if</span>($numeric) &#123;</span><br><span class="line">        $hash = sprintf(<span class="string">'%0'</span>.$length.<span class="string">'d'</span>, mt_rand(<span class="number">0</span>, pow(<span class="number">10</span>, $length) - <span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $hash = <span class="string">''</span>;</span><br><span class="line">        $chars = <span class="string">'ABCDEFGHJKLMNPQRSTUVWXYZ1234567890abcdefghjkmnpqrstuvwxyz'</span>;</span><br><span class="line">        $max = strlen($chars) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $length; $i++) &#123;</span><br><span class="line">            $hash .= $chars[mt_rand(<span class="number">0</span>, $max)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  密码的存储大概就这样子,欢迎来喷.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;  密码的存储在一个程序中是很重要的一部分,一方面要保证其传输的安全,一方面要保证其存储的安全,虽然说这些都不能做到绝对的安全,但至少可以通过技术来减少安全问题.&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://blog.frenlee.com/categories/php/"/>
    
      <category term="代码片段" scheme="http://blog.frenlee.com/categories/php/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    
    
      <category term="php" scheme="http://blog.frenlee.com/tags/php/"/>
    
      <category term="密码" scheme="http://blog.frenlee.com/tags/%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>一起来说 Vim 语</title>
    <link href="http://blog.frenlee.com/2016/01/vim/"/>
    <id>http://blog.frenlee.com/2016/01/vim/</id>
    <published>2016-01-19T14:31:43.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h3><blockquote><p>动词代表了我们打算对文本进行什么样的操作。例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d 表示删除<span class="keyword">delete</span></span><br><span class="line">r 表示替换<span class="keyword">replace</span></span><br><span class="line">c 表示修改<span class="keyword">change</span></span><br><span class="line">y 表示复制yank</span><br><span class="line">v 表示选取 visual <span class="keyword">select</span></span><br></pre></td></tr></table></figure></p></blockquote><a id="more"></a><h3 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h3><blockquote><p>名词代表了我们即将处理的文本。Vim 中有一个专门的术语叫做文本对象text object，下面是一些文本对象的示例：</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">w 表示一个单词<span class="built_in">word</span></span><br><span class="line">s 表示一个句子<span class="keyword">sentence</span></span><br><span class="line">p 表示一个段落<span class="keyword">paragraph</span></span><br><span class="line">t 表示一个 HTML标签tag</span><br><span class="line">引号或者各种括号所包含的文本称作一个文本块。</span><br></pre></td></tr></table></figure><h3 id="介词"><a href="#介词" class="headerlink" title="介词"></a>介词</h3><blockquote><p>介词界定了待编辑文本的范围或者位置。例如：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i 表示“在<span class="params">...</span>之内”inside</span><br><span class="line">a 表示“环绕<span class="params">...</span>”around</span><br><span class="line">t 表示“到<span class="params">...</span>位置前”<span class="keyword">to</span></span><br><span class="line">f 表示“到<span class="params">...</span>位置上” forward</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="组词为句"><a href="#组词为句" class="headerlink" title="组词为句"></a>组词为句</h3><blockquote><p>有了这些基本的语言元素，我们就可以着手构造一些简单的命令了。文本编辑命令的基本语法如下：<br>动词 介词 名词<br>下面是一些例子（如果熟悉了上面的概念，你将会看到这些例子非常容易理解），请亲自在 Vim 中试验一番。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 删除一个段落: delete inside paragraph</span></span><br><span class="line">dip</span><br><span class="line"><span class="meta"># 选取一个句子: visual select inside sentence</span></span><br><span class="line">vis</span><br><span class="line"><span class="meta"># 修改一个单词: change inside word</span></span><br><span class="line">ciw</span><br><span class="line"><span class="meta"># 修改一个单词: change around word</span></span><br><span class="line">caw</span><br><span class="line"><span class="meta"># 删除文本直到字符“x”（不包括字符“x”）: delete to x</span></span><br><span class="line">dtx</span><br><span class="line"><span class="meta"># 删除文本直到字符“x”（包括字符“x”）: delete forward x</span></span><br><span class="line">dfx</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="数词"><a href="#数词" class="headerlink" title="数词"></a>数词</h3><blockquote><p>数词指定了待编辑文本对象的数量，从这个角度而言，数词也可以看作是一种介词。引入数词之后，文本编辑命令的语法就升级成了下面这样：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">动词 介词/数词 名词</span><br><span class="line">下面是几个例子：</span><br><span class="line"><span class="meta"># 修改三个单词：change three words</span></span><br><span class="line">c3w</span><br><span class="line"><span class="meta"># 删除两个单词：delete two words</span></span><br><span class="line">d2w</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>另外，数词也可以修饰动词，表示将操作执行 n 次。于是，我们又有了下面的语法：</p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 数词 动词 名词</span><br><span class="line"><span class="meta"># 两次删除单词（等价于删除两个单词）: twice delete word</span></span><br><span class="line"><span class="number">2</span>dw</span><br><span class="line"><span class="meta"># 三次删除字符（等价于删除三个字符）：three times delete character</span></span><br><span class="line"><span class="number">3</span>x</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;动词&quot;&gt;&lt;a href=&quot;#动词&quot; class=&quot;headerlink&quot; title=&quot;动词&quot;&gt;&lt;/a&gt;动词&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;动词代表了我们打算对文本进行什么样的操作。例如：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;d 表示删除&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r 表示替换&lt;span class=&quot;keyword&quot;&gt;replace&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c 表示修改&lt;span class=&quot;keyword&quot;&gt;change&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;y 表示复制yank&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v 表示选取 visual &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.frenlee.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="linux" scheme="http://blog.frenlee.com/tags/linux/"/>
    
      <category term="vim" scheme="http://blog.frenlee.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>^2016$2015</title>
    <link href="http://blog.frenlee.com/2016/01/endof2015/"/>
    <id>http://blog.frenlee.com/2016/01/endof2015/</id>
    <published>2016-01-01T14:42:56.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>^<br>人,总是要学会向前看.<br><a id="more"></a></p><h3 id="回首"><a href="#回首" class="headerlink" title="回首"></a>回首</h3><p>2015,对于我的人生来说,是孕育期的最后一个时期.十几年的学生生涯已经画上了一个终至符.慢慢的踏上了这个复杂多变的社会.也开始要学会慢慢的应对人情世故,可我希望自己不用戴上面具坦然的面对它.我庆幸我还呆在你们这群吵吵闹闹的人身边.</p><p>在这一年里,似乎也没有什么可后悔的事情.生命中总是会有一些事情会改变你的人生走向,在学校图书馆里的那段时光是我人生的一个转折点,它给我指明一条路,一条我想走到黑的路.PHPer!!!感觉从来没有对一件事情如此的坚定.而现在我想静静的坐在电脑旁,默默的敲打着键盘.与黑夜白天为伍,用手指堆切自己世界.不是很伟大,但这确实我想要的平凡.</p><p>毕设&lt;湖南理工学院图书馆微信公众&gt;,我的第一个项目,到目前也快8000用户了,想想还是有一点点的成就感.不过在这个数目上用户再也上不去了,随着自身的成长,总感觉当时代码需要去重构,后来就慢慢的去重新写,不过可悲的是,写到现在,写过两个版本,期间遇到过一些问题,感觉不如己意.在快要写出大体结构的时候萌生了另一个想法,总是拗不过自己,于是,搁浅,重写.重复造这轮子.自己还一股劲的往里面钻.这就是我的坏毛病吧.其实,自己很明白,没什么事情始完美的.这是病,得治,可我没药啊.</p><p>前半年,在深国旅的日子,在那里学习了很多东西,比如说ThinkPHP,学习的第一个PHP框架.写了一个网站,不过因为审美不行,前段写的乱糟糟的,后来因为毕业原因,离开了这个地方,到现在也许这个项目还木有上线吧.在那里认识了,小芸姐,冰冰,门柱,老信等等人,其实大家都很好相处,老实怀恋一起去浪的时光.然而自己还有在人情处理方面没处理好的地方.人啊,总是要过去了才能明白自己的坏啊.</p><p>后半年,后半年,后半年,这是一个新的开始,其实刚进去始满怀这期待的,在腾讯的这段日子里,慢慢的感觉到了很多不如意的地方,当然这不是重点,重点是在这一段日子里认识了自己的很多不足之处,总是胃口太大,想学的东西太多,而自己不够专注,没有计划.所以到头来都没有学号一样东西.喜欢后台的一些框架比如说Laravel,YII,等等,前段的一些也很好奇.比如说AngularJS,requireJs,BootStrap,VueJS,等等.还想学习一些后台语言,比如说Python,NodeJS,然后还想学学一些工具,比如说Docker,Shell,更加深入的学习PHP,MySQL,以及Nginx的一些东西.哎,太多了.不过在腾讯的这些时间里,学习了CodeIgiter,然后学了Foundation前段框架,不过在编程的过程中发现自己在很多时候都是没有认真去思考的,缺少充分的测试,到时程序中会有很多小bug.在这期间也完成了两个小项目,书志APP后台及API的编写,GHouseAPP的后台及API的编写,不过写的还是比较搓的,然后自己把自己网站的主页完成了,虽然还没有达到自己的预期目标,今年再来慢慢完善.</p><h3 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h3><ul><li><p>有计划的去学习,工作,生活!</p></li><li><p>专注,专注,专注!!!!!</p></li><li><p>2016,愿你成为你想要的自己!</p></li><li><p>既往不恋,纵情向前!</p></li></ul><p>$</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;^&lt;br&gt;人,总是要学会向前看.&lt;br&gt;
    
    </summary>
    
      <category term="记录" scheme="http://blog.frenlee.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="生活记录" scheme="http://blog.frenlee.com/tags/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>PHP-FPM优雅的重启</title>
    <link href="http://blog.frenlee.com/2015/12/php-fpm-restart/"/>
    <id>http://blog.frenlee.com/2015/12/php-fpm-restart/</id>
    <published>2015-12-25T15:18:12.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="修改php-fpm配置文件，当php-fpm快不行的时候进行自动重启。"><a href="#修改php-fpm配置文件，当php-fpm快不行的时候进行自动重启。" class="headerlink" title="修改php-fpm配置文件，当php-fpm快不行的时候进行自动重启。"></a>修改php-fpm配置文件，当php-fpm快不行的时候进行自动重启。</h3><p>php-fpm配置文件位置：<br>Ubuntu中：<code>/etc/php5/fpm/php-fpm.conf</code><br>CentOS中：<code>/etc/php-fpm.conf</code></p><p>在php-fpm配置文件中，emergency_restart_threshold、emergency_restart_interval这两个设置通常是被默认注释掉得，这两个设置的作用是，如果在指定的一段时间内有指定个子进程失效了，让php-fpm主进程重启。这是php-fpm进程的基本安全保障，能解决简单的问题。</p><p><code>emergency_restart_threshold = 10</code></p><blockquote><p>在指定的一段时间内，如果失效的php-fpm子进程数超过这个值，php-fpm主进程就优雅的重启。</p></blockquote><p><code>emergency_restart_interval = 1m</code></p><blockquote><p>设定emergency_restart_threshold设置采用的时间跨度。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;修改php-fpm配置文件，当php-fpm快不行的时候进行自动重启。&quot;&gt;&lt;a href=&quot;#修改php-fpm配置文件，当php-fpm快不行的时候进行自动重启。&quot; class=&quot;headerlink&quot; title=&quot;修改php-fpm配置文件，当php-fpm
      
    
    </summary>
    
      <category term="php" scheme="http://blog.frenlee.com/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.frenlee.com/tags/php/"/>
    
      <category term="php-fpm" scheme="http://blog.frenlee.com/tags/php-fpm/"/>
    
  </entry>
  
  <entry>
    <title>使用PHP脚本同步git项目</title>
    <link href="http://blog.frenlee.com/2015/12/php-sync-git-project/"/>
    <id>http://blog.frenlee.com/2015/12/php-sync-git-project/</id>
    <published>2015-12-11T15:26:59.000Z</published>
    <updated>2018-11-20T04:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己在开发项目的时候总是会遇到一些比较繁琐的事情,比如说开发环境中的代码使用git版本控制工具,提交到git远程仓库后,若要同步到服务器上去,如果开发过程中更改的很频繁,那么这就是一件繁琐而痛苦的事情.以往我都是ssh到远程服务器上,手动敲命令,然后pull同步到服务器上的.如果能够使用web hook 也就是远程仓库中的web hook钩子,在每次我push代码后能够让服务器自动pull代码下来,实现自动同步就好了.</p><p>以前本来也有去切一个php脚本,通过web hook去实现代码同步的,无奈因为git与代码文件限权,ssh key等各方面权限问题的影响,没有实施成功.今天本来想研究下自动部署那些比较重量级的软件的.但无意中发现了安正超写的使用php脚本同步git项目的文章,然后将权限问题都解决了,然后在记得服务器上实现了下,<br><a id="more"></a></p><p>我使用的环境是Ubuntu14.04 + nginx + git 1.9.1</p><p>具体步骤如下:</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>服务器上必须按照git,web服务以及开启ssh服务</li><li>拥有一个自己的git远程仓库</li></ul><p>国外比较常用的有  <a href="https://github.com/" target="_blank" rel="noopener">github</a> <a href="http://gitlab.com/" target="_blank" rel="noopener">gitlab</a>  国内比较常用的有  <a href="http://git.oschina.net/" target="_blank" rel="noopener">开源中国</a>  <a href="http://coding.net/" target="_blank" rel="noopener">coding</a>  国内的服务器的话建议使用国内的版本仓库</p><h3 id="在服务器上"><a href="#在服务器上" class="headerlink" title="在服务器上"></a>在服务器上</h3><ol><li><p>根据服务器进入到web服务器根目录下,我使用的是nginx,所以用户名为www-data ,apache 用户为  apache,不同的环境会有所区别,查看web用户的家目录,在/etc/passwd 文件中可以查看</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat <span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure></li><li><p>在web用户家目录下创建 .ssh 文件夹,将所有者和用户组修改该www-data</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir <span class="regexp">/var/</span>www/.ssh</span><br><span class="line">sudo chown www-<span class="string">data:</span>www-data <span class="regexp">/var/</span>www<span class="regexp">/.ssh/</span> -R</span><br></pre></td></tr></table></figure></li><li><p>使用 www-data 用户生成ssh key</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> -<span class="type">Hu</span> www-<span class="class"><span class="keyword">data</span> ssh-keygen -t rsa</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>一直回车就好了,然后进入.ssh文件夹既可以看到id_rsa,id_rsa.pub和known_hosts文件了</p></blockquote><ol start="4"><li>配置git 用户和email<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo git<span class="built_in"> config </span>--global user.name <span class="string">"frenlee"</span></span><br><span class="line">sudo git<span class="built_in"> config </span>--global user.email <span class="string">"frenlee710@gmail.com"</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>用户名和邮箱需要和git远程仓库的一样,这样提交代码的时候就可以知道是谁提交的.而且可以直接点击用户名跳转到相应的用户</p></blockquote><ol start="5"><li><p>创建仓库文件夹repos,这个看个人爱好,什么文件名都可以,最好是放在web用户家目录下,并修改所属者和所属组</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir <span class="regexp">/var/</span>www/repos</span><br><span class="line">sudo chown www-<span class="string">data:</span>www-data <span class="regexp">/var/</span>www<span class="regexp">/repos/</span> -R</span><br></pre></td></tr></table></figure></li><li><p>创建项目文件夹,并修改权限</p><blockquote><p>我这里的项目文件夹和脚本文件名相同,早/var/www/html/下,创建了一个test 文件夹</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">mkdir</span> /<span class="keyword">var</span>/www/html/<span class="keyword">test</span></span><br><span class="line">sudo chown www-data:www-data /<span class="keyword">var</span>/www/html/<span class="keyword">test</span>/ -<span class="built_in">R</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>添加PHP钩子脚本</p><blockquote><p>在自己服务器可访问到地方添加一个php文件,具体内容为<code>hook.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * author: v_frli &lt;frenlee@163.com&gt;</span></span><br><span class="line"><span class="comment"> * since: 2015/12/10 17:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line">$repos = <span class="keyword">array</span>(<span class="string">'test'</span>);<span class="comment">//允许操作的代码库</span></span><br><span class="line">$target = <span class="string">'/var/www/html/'</span>;<span class="comment">//目标文件夹</span></span><br><span class="line">$dir = <span class="string">'/var/www/repos/'</span>;<span class="comment">//git 目录</span></span><br><span class="line">$token = md5(<span class="string">'123456'</span>);<span class="comment">//验证凭证</span></span><br><span class="line">$wwwUser = <span class="string">'www-data'</span>;</span><br><span class="line">$wwwGroup = <span class="string">'www-data'</span>;</span><br><span class="line"></span><br><span class="line">$input = $_GET;</span><br><span class="line"><span class="keyword">if</span> (!(<span class="keyword">isset</span>($input[<span class="string">'token'</span>], $input[<span class="string">'target'</span>]) &amp;&amp; $input[<span class="string">'token'</span>] === $token &amp;&amp; in_array($input[<span class="string">'target'</span>], $repos))) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">'Error request'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$target .= $input[<span class="string">'target'</span>];<span class="comment">//项目目标地址</span></span><br><span class="line">$dir    .= $input[<span class="string">'target'</span>];<span class="comment">//项目原地址</span></span><br><span class="line"><span class="keyword">if</span> (!is_dir($target) || !is_dir($dir)) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">'Dir is not exist'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行命令</span></span><br><span class="line">$cmds = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"cd $dir &amp;&amp; git pull"</span>, <span class="comment">//git pull</span></span><br><span class="line">    <span class="string">"rm -rf $target/* &amp;&amp; cp -r $dir/* $target/"</span>,<span class="comment">//删除旧文件  复制新文件</span></span><br><span class="line">    <span class="string">"chown -R &#123;$wwwUser&#125;:&#123;$wwwGroup&#125; $target/"</span><span class="comment">//修改权限</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">foreach</span>($cmds <span class="keyword">as</span> $cmd) &#123;</span><br><span class="line">    shell_exec($cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h3 id="在托管网站上"><a href="#在托管网站上" class="headerlink" title="在托管网站上"></a>在托管网站上</h3><ol><li>添加ssh 公钥,我这里使用的是gitlab</li></ol><p>获取 /var/www/.ssh/id_rsa.pub的内容添加到托管网站的ssh key 下<br>gitlab的在Profile Settings&gt;SSH Keys下</p><ol start="2"><li>在托管网站上创建一个项目</li></ol><p><a href="mailto:git@gitlab.com" target="_blank" rel="noopener">git@gitlab.com</a>:frenlee710/test.git</p><ol start="3"><li>添加钩子<br>在项目的setting&gt;Web Hooks 下添加自己添加的hook.php文件的访问路径</li></ol><p><a href="http://yoursite.com/hook.php?token=e10adc3949ba59abbe56e057f20f883e&amp;target=test" target="_blank" rel="noopener">http://yoursite.com/hook.php?token=e10adc3949ba59abbe56e057f20f883e&amp;target=test</a></p><p>把路径加入就可以了,token  是123456的md5,用来控制我们脚本代码至执行的权限,target表示你要更新的项目是哪一个.</p><h3 id="服务器上"><a href="#服务器上" class="headerlink" title="服务器上"></a>服务器上</h3><ol><li>初始化<br>我们首先得在服务器上把代码pull下来<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -Hu www-data git clone git<span class="meta">@gitlab</span>.<span class="string">com:</span>frenlee<span class="regexp">/test.git /</span>var<span class="regexp">/www/</span>repos/test --depth=<span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>这样就可以了,可以在本地编写代码,然后进行push ,push完成后,等待几秒就可以去验证在项目代码中是否存在代码了.当然第一次弄可能不是一帆风顺,可以自己慢慢一个一个步骤来调试.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己在开发项目的时候总是会遇到一些比较繁琐的事情,比如说开发环境中的代码使用git版本控制工具,提交到git远程仓库后,若要同步到服务器上去,如果开发过程中更改的很频繁,那么这就是一件繁琐而痛苦的事情.以往我都是ssh到远程服务器上,手动敲命令,然后pull同步到服务器上的.如果能够使用web hook 也就是远程仓库中的web hook钩子,在每次我push代码后能够让服务器自动pull代码下来,实现自动同步就好了.&lt;/p&gt;
&lt;p&gt;以前本来也有去切一个php脚本,通过web hook去实现代码同步的,无奈因为git与代码文件限权,ssh key等各方面权限问题的影响,没有实施成功.今天本来想研究下自动部署那些比较重量级的软件的.但无意中发现了安正超写的使用php脚本同步git项目的文章,然后将权限问题都解决了,然后在记得服务器上实现了下,&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://blog.frenlee.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="php" scheme="http://blog.frenlee.com/tags/php/"/>
    
      <category term="git" scheme="http://blog.frenlee.com/tags/git/"/>
    
  </entry>
  
</feed>
